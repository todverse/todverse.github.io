{"version":3,"file":"js/app.7607f651.js","mappings":"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","sources":["webpack://app-bps-tree-vuejs/./src/components/ActionButton.vue","webpack://app-bps-tree-vuejs/./src/components/ActionButton.vue?8ad0","webpack://app-bps-tree-vuejs/./src/screens/Marketplace.vue","webpack://app-bps-tree-vuejs/./src/screens/Marketplace.vue?e481","webpack://app-bps-tree-vuejs/./src/api/getFields.js","webpack://app-bps-tree-vuejs/./src/api/getAdditional.js","webpack://app-bps-tree-vuejs/./src/components/fields.js","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Enum.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Enum.vue?c3af","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Select.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Select.vue?fb97","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Multifield.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Multifield.vue?f25d","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Crm.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/Crm.vue?fb5e","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/CrmMulti.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/CrmMulti.vue?cc13","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/DatePicker.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/DatePicker.vue?144e","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/TextBoxArr.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/TextBoxArr.vue?bf4a","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/TextBox.vue","webpack://app-bps-tree-vuejs/./src/components/editorTemplates/TextBox.vue?1cb8","webpack://app-bps-tree-vuejs/./src/components/TableDataGrid.vue","webpack://app-bps-tree-vuejs/./src/components/TableDataGrid.vue?0e2d","webpack://app-bps-tree-vuejs/./src/screens/Tablescreen.vue","webpack://app-bps-tree-vuejs/./src/App.vue","webpack://app-bps-tree-vuejs/./src/App.vue?7ccd","webpack://app-bps-tree-vuejs/./src/store/index.js","webpack://app-bps-tree-vuejs/./src/main.js","webpack://app-bps-tree-vuejs/webpack/bootstrap","webpack://app-bps-tree-vuejs/webpack/runtime/chunk loaded","webpack://app-bps-tree-vuejs/webpack/runtime/compat get default export","webpack://app-bps-tree-vuejs/webpack/runtime/define property getters","webpack://app-bps-tree-vuejs/webpack/runtime/global","webpack://app-bps-tree-vuejs/webpack/runtime/hasOwnProperty shorthand","webpack://app-bps-tree-vuejs/webpack/runtime/make namespace object","webpack://app-bps-tree-vuejs/webpack/runtime/node module decorator","webpack://app-bps-tree-vuejs/webpack/runtime/jsonp chunk loading","webpack://app-bps-tree-vuejs/webpack/startup"],"sourcesContent":["<script setup>\r\n\r\nconst messages = {\r\n    leads: 'Лидах',\r\n    deals: 'Сделках',\r\n    companies: 'Компаниях',\r\n    contacts : 'Контактах',\r\n    quotes: 'Предложениях',\r\n    invoices: 'Умных Счетах',\r\n    smart: 'Смарт-процессах'\r\n}\r\n\r\nconst props = defineProps(['tarType', 'isOn'])\r\n</script>\r\n\r\n<template>\r\n    <a-button type=\"primary\" :danger=\"!isOn\" @click=\"$emit('clickHandler', $event)\" :tarType=\"tarType\">\r\n        {{isOn ? 'Включить' : 'Отключить'}} поля в {{messages[tarType ] }}\r\n    </a-button> \r\n</template>","import script from \"./ActionButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ActionButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup >\r\nimport { notification } from 'ant-design-vue';\r\nimport { onMounted, ref } from 'vue';\r\nimport ActionButton from '../components/ActionButton.vue';\r\nimport { callMethod } from 'bx24-api'\r\n\r\nconst btnArray = ref(\r\n    [{\r\n        isOn: true,\r\n        targetType: \"leads\"\r\n    }, {\r\n        isOn: true,\r\n        targetType: \"deals\"\r\n    }, {\r\n        isOn: true,\r\n        targetType: \"contacts\"\r\n    }, {\r\n        isOn: true,\r\n        targetType: \"companies\"\r\n    },\r\n    {\r\n        isOn:true,\r\n        targetType: \"smart\"\r\n    }, \r\n    {\r\n        isOn: true,\r\n        targetType: \"quotes\"\r\n    }, {\r\n        isOn: true,\r\n        targetType: \"invoices\"\r\n    }\r\n]\r\n    )\r\n    onMounted(async ()=>{\r\n        let domain = location.origin + location.pathname;\r\n        let res= await callMethod('placement.get', {})\r\n        res.data().forEach((placement=>{\r\n           if (placement[\"handler\"]!==domain) return\r\n           switch (placement[\"placement\"]){\r\n            case \"CRM_LEAD_DETAIL_TAB\" : btnArray.value[0].isOn = false; break;\r\n            case \"CRM_DEAL_DETAIL_TAB\" : btnArray.value[1].isOn = false; break;\r\n            case \"CRM_CONTACT_DETAIL_TAB\" : btnArray.value[2].isOn = false; break;\r\n            case \"CRM_COMPANY_DETAIL_TAB\" : btnArray.value[3].isOn = false; break;\r\n            case \"CRM_QUOTE_DETAIL_TAB\" : btnArray.value[5].isOn = false; break;\r\n            case \"CRM_SMART_INVOICE_DETAIL_TAB\": btnArray.value[6].isOn = false; break;\r\n           }\r\n           if(String(placement['placement']).startsWith('CRM_DYNAMIC')){\r\n            btnArray.value[4].isOn = false;\r\n           }\r\n        }))\r\n    })\r\n    const notifyMessage = (on, type) =>{\r\n        switch (type) {\r\n                case 'leads' : return on ? 'Лиды' : 'Лидов'\r\n                case 'deals' : return on ? 'Сделки' : 'Сделок'\r\n                case 'companies' : return on ? 'Компании' : 'Компаний'\r\n                case 'contacts' : return on ? 'Контакты' : 'Контактов'\r\n                case 'quotes' : return on ? 'Коммерческих предложениях' : 'Коммерческих предложений'\r\n                case 'invoices' : return on ? 'Умных Счетах' : 'Умных Счетов'\r\n                case 'smart' : return on ? 'Смарт Процессы' : 'Смарт Процессов'\r\n            }\r\n    }\r\n    const clickHandler = async(event) =>{\r\n            const targetbtn = btnArray.value.find((btn)=>btn.targetType===event.currentTarget.attributes.tarType.value)\r\n            const index = btnArray.value.indexOf(targetbtn)\r\n            console.log(index)\r\n            let domain = location.origin + location.pathname;\r\n            console.log(domain)\r\n            let placement\r\n            if(targetbtn){\r\n                switch (targetbtn.targetType) {\r\n                case 'leads' : placement =  'CRM_LEAD_DETAIL_TAB'; break;\r\n                case 'deals' : placement =  'CRM_DEAL_DETAIL_TAB'; break;\r\n                case 'companies' : placement =  'CRM_COMPANY_DETAIL_TAB'; break;\r\n                case 'contacts' : placement =  'CRM_CONTACT_DETAIL_TAB'; break;\r\n                case 'quotes': placement = 'CRM_QUOTE_DETAIL_TAB'; break;\r\n                case 'invoices' : placement = 'CRM_SMART_INVOICE_DETAIL_TAB'; break;\r\n                }\r\n            }\r\n            \r\n            console.log(placement)\r\n            if(targetbtn.targetType === 'smart'){\r\n                const res = await callMethod('crm.type.list')\r\n                const types = res.data().types\r\n                const IDs = types.map((type)=>type.entityTypeId)\r\n                if(targetbtn.isOn){\r\n                    IDs.forEach(async id=>await callMethod('placement.bind',{\r\n                        PLACEMENT: `CRM_DYNAMIC_${id}_DETAIL_TAB`,\r\n                        HANDLER: domain,\r\n                        TITLE: 'Приложение поля', \r\n                        DESCRIPTION: 'Показать поля', \r\n                    }))\r\n                } else {\r\n                    IDs.forEach(async id=>await callMethod('placement.unbind',{\r\n                        PLACEMENT: `CRM_DYNAMIC_${id}_DETAIL_TAB`,\r\n                        HANDLER: domain\r\n                    }))\r\n                }\r\n            } else {\r\n                !targetbtn?.isOn  \r\n                ? \r\n                    await callMethod('placement.unbind', { \r\n                        PLACEMENT: placement, \r\n                        HANDLER: `${domain}`, \r\n                    })\r\n                : \r\n                    await callMethod('placement.bind' , { \r\n                        PLACEMENT: placement, \r\n                        HANDLER: `${domain}`, \r\n                        TITLE: 'Приложение поля', \r\n                        DESCRIPTION: 'Показать поля', \r\n                    });   \r\n            }\r\n            btnArray.value[index].isOn = !btnArray.value[index].isOn\r\n            notification.open({\r\n                message: targetbtn?.isOn \r\n                ? `'Поля' были убраны из ${notifyMessage(!targetbtn?.isOn, targetbtn?.targetType )}` \r\n                : `'Поля' были добавлены в ${notifyMessage(!targetbtn?.isOn, targetbtn?.targetType )}`\r\n                })\r\n                \r\n    }\r\n</script>\r\n<template>\r\n    <div id=\"init\">\r\n        <a-typography-title  :level=\"2\" class=\"title\">Приложение \"Показать Поля\"</a-typography-title>\r\n        <a-typography-paragraph class=\"title\">После нажатия на кнопкну сущности в карточку будет добавлена кнопка \"Поля\", </a-typography-paragraph> <br/>\r\n        <a-typography-paragraph class=\"title\">с её помощью можно просматривать доступные для карточки поля, их описание дополнительную информацию, а также \r\n            некоторые данные можно редактировать прямо там</a-typography-paragraph>\r\n        <div class='container_btn' >\r\n            <ActionButton v-for=\"btn in btnArray\" :key=\"btn.targetType\" :targetType=\"btn.targetType\" :isOn=\"btn.isOn\" @clickHandler=\"clickHandler\" :tarType=\"btn.targetType\"/>\r\n        </div>\r\n    </div>\r\n</template>\r\n<style scoped>\r\nhtml, body {\r\n        overflow: hidden;\r\n    }\r\n    #init{\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        width: 100vw;\r\n        height: 90vh;\r\n    }\r\n    .ui-btn-pad {\r\n        width: 220px;\r\n        margin-top: 5px;\r\n    }\r\n    .ui-btn {\r\n        margin-left: 0 !important;\r\n    }\r\n    .title {\r\n        text-align: center;\r\n    }\r\n    .container_btn {\r\n        align-self: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: fit-content !important;\r\n        margin: 0% !important;\r\n    }\r\n    .container_btn > *{\r\n        width: 20rem;\r\n        margin-bottom: .5rem;\r\n    }\r\n</style>","import script from \"./Marketplace.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Marketplace.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Marketplace.vue?vue&type=style&index=0&id=34cd27fe&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-34cd27fe\"]])\n\nexport default __exports__","import { placement, callMethod } from 'bx24-api';\r\n\r\nexport async function* getFields(){\r\n    const table = []\r\n    const fetchObj = {}\r\n    const res = await placement.info()\r\n    let place = res.placement.split('_')[1].toLowerCase()\r\n    let entityID = res.options.ID\r\n    const entityTypeID = res.placement.split('_')[2]\r\n    const contactTypes = {\r\n        WORK: 'Рабочий',\r\n        MOBILE: 'Мобильный',\r\n        FAX: 'Факс',\r\n        HOME: 'Домашний',\r\n        PAGER: 'Пейджер',\r\n        MAILING: 'Для рассылок',\r\n        OTHER: 'Другой',\r\n        OPENLINE: 'Онлайн-чат',\r\n        IMOL: 'Открытая линия',\r\n    }\r\n    class Row {\r\n        constructor(NAME, DESCRIPTION, TYPE,\r\n            DISPLAYVALUE, PERMISSIONS, EDITOR, IBLOCKID, CRMENTITY, TRUEVALUE, ENUM){\r\n                this.NAME = NAME\r\n                this.DESCRIPTION = DESCRIPTION\r\n                this.TYPE = TYPE\r\n                this.DISPLAYVALUE = DISPLAYVALUE \r\n                this.PERMISSIONS = PERMISSIONS\r\n                this.EDITOR = EDITOR\r\n                this.IBLOCKID = IBLOCKID\r\n                this.CRMENTITY = CRMENTITY\r\n                this.TRUEVALUE = TRUEVALUE\r\n                this.ENUM = ENUM\r\n\r\n        }\r\n    }\r\n    let entityFields\r\n    let fieldsArray\r\n    if(place==='dynamic'){\r\n        const entityTypeId = res.placement.split('_')[2]\r\n        const entityID = res.options.ID\r\n        entityFields = await (await callMethod(`crm.item.get`, { id: entityID, entityTypeId })).data()\r\n        fieldsArray = await (await callMethod(`crm.item.fields`, {entityTypeId})).data().fields\r\n        console.log(fieldsArray)\r\n    } else if(place==='smart'){\r\n        const entityTypeId = 31\r\n        const entityID = res.options.ID\r\n        entityFields = await (await callMethod(`crm.item.get`, { id: entityID, entityTypeId })).data()\r\n        fieldsArray = await (await callMethod(`crm.item.fields`, {entityTypeId})).data().fields\r\n        console.log(fieldsArray)\r\n    } \r\n    else {\r\n        entityFields = await (await callMethod(`crm.${place}.get`, { id: entityID })).data()\r\n        fieldsArray = await (await callMethod(`crm.${place}.fields`, {})).data()\r\n    }\r\n    Object.keys(fieldsArray).forEach((key)=>{\r\n        let permissions = []\r\n        let editor = ''\r\n        let enumItems = []\r\n        let iblockid = 0\r\n        let description = ''\r\n        let entity = ''\r\n        fieldsArray[key].formLabel\r\n                        ? description = fieldsArray[key].formLabel\r\n                        : description = fieldsArray[key].title\r\n        if(fieldsArray[key].isDynamic) permissions.push('Динамичный')\r\n        if(fieldsArray[key].isImmutable) permissions.push('Неизменный')\r\n        if(fieldsArray[key].isMultiple) permissions.push('Множественный')\r\n        if(fieldsArray[key].isReadOnly) permissions.push('Только для чтения')\r\n        if(fieldsArray[key].isRequired) permissions.push('Обязательное')\r\n\r\n        if (fieldsArray[key].isMultiple && fieldsArray[key].type==='crm_multifield') editor = 'multiedit'\r\n        if ((fieldsArray[key].isMultiple && fieldsArray[key].type!=='crm_multifield') || (fieldsArray[key].items &&fieldsArray[key].isMultiple )){\r\n            if(fieldsArray[key].type==='string'||fieldsArray[key].type==='integer'||fieldsArray[key].type==='double'||fieldsArray[key].type==='url'){\r\n                editor = 'textArray'\r\n            } else {\r\n                editor = 'checkBoxes'\r\n            }\r\n        }\r\n        else if(fieldsArray[key].items && !fieldsArray[key].isMultiple){\r\n            editor = 'selectBox'\r\n        }\r\n        if (fieldsArray[key].type === 'enumeration' && editor ==='checkBoxes' ) {\r\n            console.log(fieldsArray[key])\r\n            fieldsArray[key].items.forEach(item => {\r\n                enumItems.push(item)\r\n            });\r\n\r\n        } else if (fieldsArray[key].type === 'enumeration' && editor ==='selectBox'){\r\n            fieldsArray[key].items.forEach(item => {\r\n                enumItems.push(item)\r\n            });\r\n        }\r\n        if (fieldsArray[key].type.startsWith('iblock_')) {\r\n            iblockid = fieldsArray[key].settings.IBLOCK_ID\r\n        };\r\n        if(fieldsArray[key].type ==='crm'){\r\n            entity = Object.keys(fieldsArray[key].settings).filter(el=>\r\n                fieldsArray[key].settings[el] === 'Y'\r\n            )\r\n\r\n        }\r\n        if((fieldsArray[key].type==='string'||fieldsArray[key].type==='integer'||fieldsArray[key].type==='double'||fieldsArray[key].type==='url') && !fieldsArray[key].isMultiple ){\r\n            editor = 'textBox'\r\n        }\r\n        if(fieldsArray[key].type==='file') console.log(fieldsArray[key])\r\n        if((fieldsArray[key].type === 'user'\r\n        ||fieldsArray[key].type === 'employee'\r\n        ||fieldsArray[key].type === 'crm_company'\r\n        ||fieldsArray[key].type === 'iblock_element'\r\n        ||fieldsArray[key].type === 'iblock_section'\r\n        ||fieldsArray[key].type === 'crm_status'\r\n        ||fieldsArray[key].type === 'crm_currency'\r\n        ||fieldsArray[key].type === 'crm_contact'\r\n        ||fieldsArray[key].type==='char'\r\n        ) && !fieldsArray[key].isMultiple){\r\n            editor = 'selectBox'\r\n        }\r\n        if(fieldsArray[key].type === 'crm_quote'\r\n        ||fieldsArray[key].type === 'money'\r\n        ||fieldsArray[key].type === 'resourcebooking'\r\n        ||fieldsArray[key].type === 'file'\r\n        ||fieldsArray[key].type === 'location'\r\n        ||fieldsArray[key].type === 'crm_category'\r\n        ){\r\n            editor = 'nan'\r\n        }\r\n        table.push(new Row(key, description, fieldsArray[key].type, '', permissions, editor, iblockid, entity, '', enumItems))\r\n\r\n    })\r\n    table.forEach(row=>{\r\n        const rowName = row.NAME\r\n        const rowValue = entityFields[row.NAME]\r\n        if(row.TYPE==='crm_multifield'){\r\n            row.ALLOW = true\r\n            row.TRUEVALUE = rowValue\r\n            rowValue && rowValue.length && rowValue.forEach(item=>{\r\n                if(contactTypes[item.VALUE_TYPE]){\r\n                    row.DISPLAYVALUE += `${contactTypes[item.VALUE_TYPE]}: ${item.VALUE},`;\r\n                } else {\r\n                    row.DISPLAYVALUE += `${item.VALUE_TYPE}: ${item.VALUE}, `;\r\n                }\r\n            })\r\n        }\r\n        if(row.EDITOR==='checkBoxes'){\r\n            row.ALLOW = true\r\n            console.log(rowValue)\r\n            if(rowValue) row.TRUEVALUE = row.ENUM.filter(el=>rowValue.includes(Number(el.ID)))\r\n            if(row.TRUEVALUE) row.DISPLAYVALUE = row.TRUEVALUE.map(el=>el.VALUE).join(', ')\r\n\r\n        }\r\n        if(row.EDITOR==='textBox'){\r\n            row.ALLOW = true\r\n\r\n            row.TRUEVALUE = rowValue\r\n            row.DISPLAYVALUE = rowValue\r\n        }\r\n        if(row.EDITOR==='textArray'){\r\n            row.ALLOW = true\r\n            console.log(rowValue)\r\n            row.TRUEVALUE = rowValue\r\n            if(rowValue) row.DISPLAYVALUE = rowValue.join(', ')\r\n        }\r\n        if(row.EDITOR==='selectBox' && row.TYPE==='enumeration'){\r\n            row.ALLOW = true\r\n                if(!rowValue) return\r\n                row.DISPLAYVALUE = row.ENUM.filter(el=>el.ID==rowValue)[0].VALUE\r\n                row.TRUEVALUE = row.ENUM.filter(el=>el.ID==rowValue)[0]\r\n        }\r\n        if(row.TYPE==='char'){\r\n            row.ALLOW = true\r\n\r\n            row.DISPLAYVALUE = rowValue\r\n            row.TRUEVALUE ={ID:rowValue, NAME:rowValue}\r\n        }\r\n        if(row.TYPE==='boolean'){\r\n            row.ALLOW = true\r\n\r\n            row.EDITOR = 'selectBox'\r\n            if(rowValue==1){\r\n                row.TRUEVALUE = {\r\n                    ID:1,\r\n                    NAME:'Да'\r\n                }\r\n                row.DISPLAYVALUE = 'Да'\r\n            } else if(rowValue==0){\r\n                row.TRUEVALUE = {\r\n                    ID:0,\r\n                    NAME: 'Нет'\r\n                }\r\n                row.DISPLAYVALUE = 'Нет'\r\n            }\r\n            //row.DISPLAYVALUE = row.SELECTARRAY.filter(el=>el.ID==rowValue).VALUE\r\n        }\r\n       \r\n        if(row.TYPE==='crm'){\r\n            row.DISPLAYVALUE = rowValue\r\n            if(row.PERMISSIONS.includes('Множественный')){\r\n                row.EDITOR = 'crmMulti'\r\n            } else {\r\n                row.EDITOR = 'crm'\r\n            }\r\n            \r\n            fetchObj[rowName] = {\r\n                type: row.TYPE,\r\n                entity: row.CRMENTITY,\r\n                value: rowValue\r\n            }\r\n        }\r\n        if(row.TYPE==='user' || row.TYPE==='employee' || row.TYPE==='crm_company' || row.TYPE==='crm_status' || row.TYPE==='crm_currency'|| row.TYPE==='crm_contact'){\r\n            row.DISPLAYVALUE = rowValue\r\n            fetchObj[rowName] = {\r\n                type: row.TYPE,\r\n                value: rowValue\r\n            }\r\n        }\r\n        if(row.TYPE==='crm_currency') row.ALLOW = true\r\n        if(row.TYPE==='iblock_element' || row.TYPE==='iblock_section'){\r\n            row.DISPLAYVALUE = rowValue\r\n            fetchObj[rowName] = {\r\n                type: row.TYPE,\r\n                value: rowValue,\r\n                iblockid: row.IBLOCKID\r\n                \r\n            }\r\n        }\r\n        if(row.TYPE==='datetime'){\r\n            row.ALLOW = true\r\n            row.EDITOR = 'datetime'\r\n            if(!rowValue) return\r\n            row.DISPLAYVALUE = new Date(rowValue).toLocaleString('RU')\r\n            row.TRUEVALUE = rowValue\r\n        }\r\n        if(row.TYPE==='date'){\r\n            row.ALLOW = true\r\n            row.EDITOR = 'date'\r\n            if(!rowValue) return\r\n            row.DISPLAYVALUE = new Date(rowValue).toLocaleDateString('RU')\r\n            row.TRUEVALUE = rowValue\r\n        }\r\n\r\n        \r\n        \r\n    })\r\n    return [table, fetchObj]\r\n}","import { callBatch, callMethod } from \"bx24-api\"\r\n\r\nexport async function* getAdditional(data, fetch) {\r\n\r\n    const userIDs = []\r\n    const userfieldNames = []\r\n\r\n    const companyIDS = []\r\n    const companyFieldNames = []\r\n\r\n    const iblockelIDs = []\r\n    const iblockelfieldNames = []\r\n    const iblockIDsForEl = []\r\n\r\n    const iblocksecIDs = []\r\n    const iblocksecfieldNames = []\r\n    const iblockIDsForSec = []\r\n\r\n    const statusesIDs = []\r\n    const statusesfieldNames = []\r\n\r\n    const crmIDs = []\r\n    const crmfieldNames = []\r\n\r\n    const contactIDs = []\r\n    const contactfieldNames=[]\r\n\r\n    Object.keys(fetch.value).forEach(async key => {\r\n        switch (fetch.value[key].type) {\r\n            case 'employee':\r\n            case 'user': {\r\n                userIDs.push(fetch.value[key].value)\r\n                userfieldNames.push({ name: key, id: fetch.value[key].value })\r\n                break;\r\n            }\r\n            case 'crm_company': {\r\n                companyIDS.push(fetch.value[key].value)\r\n                companyFieldNames.push({ name: key, id: fetch.value[key].value })\r\n                break;\r\n            }\r\n            case 'iblock_element': {\r\n                iblockelIDs.push(fetch.value[key].value)\r\n                iblockIDsForEl.push(fetch.value[key].iblockid)\r\n                iblockelfieldNames.push({ name: key, id: fetch.value[key].value, IBLOCK_ID: fetch.value[key].iblockid })\r\n                break;\r\n            }\r\n            case 'crm_status': {\r\n                statusesIDs.push(fetch.value[key].value)\r\n                statusesfieldNames.push({name:key, id: fetch.value[key].value})\r\n                break;\r\n            }\r\n            case 'crm': {\r\n                console.log(fetch.value[key])\r\n                crmIDs.push({id:fetch.value[key].value, entity:fetch.value[key].entity })\r\n                crmfieldNames.push({name:key, id: fetch.value[key].value, entity:fetch.value[key].entity});\r\n                break\r\n            }\r\n            case 'crm_contact': {\r\n                contactIDs.push(fetch.value[key].value)\r\n                contactfieldNames.push({ name: key, id: fetch.value[key].value })\r\n                break;\r\n            }\r\n\r\n        }\r\n    })\r\n\r\n    const userSet = Array.from(new Set(userIDs)).flat()\r\n    if (userSet.length) {\r\n        const resUser = (await callMethod('user.get', { id: userSet })).data()\r\n        const Users = resUser\r\n        // .map(user => ({\r\n        //     ID: user.ID,\r\n        //     NAME: user.NAME ? `${user.NAME} ${user.LAST_NAME}` : `${user.EMAIL}`\r\n        // }))\r\n        const getName = (user) =>{\r\n            if(user.NAME!=='') return `${user.NAME} ${user.LAST_NAME||''}, `\r\n            else return `${user.EMAIL}, `\r\n        }\r\n        userfieldNames.forEach(field => {\r\n            const row = data.value.filter(el => el.NAME === field.name)[0]\r\n            if (Array.isArray(field.id) && field.id.length) {\r\n                row.DISPLAYVALUE = Users.filter(el => field.id.includes(Number(el.ID)))\r\n                .map((user) => getName(user)).reduce((a,b)=>a.concat(b))\r\n                row.TRUEVALUE = Users.filter(el => field.id.includes(Number(el.ID)))\r\n            } else if(field.id && field.id!=0){\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                row.DISPLAYVALUE = getName(Users.filter(user => user.ID === field.id)[0]) \r\n                row.TRUEVALUE = Users.filter(user => user.ID === field.id)[0]\r\n            }\r\n            row.ALLOW = true\r\n\r\n        })\r\n    }\r\n    const companySet = Array.from(new Set(companyIDS)).flat()\r\n    if (companySet.length) {\r\n        const resUser = (await callMethod('crm.company.list', { id: companySet })).data()\r\n        const Users = resUser\r\n        companyFieldNames.forEach(field => {\r\n            const row = data.value.filter(el => el.NAME === field.name)[0]\r\n            if (Array.isArray(field.id) && field.id.length) {\r\n                row.DISPLAYVALUE = Users.filter(el => field.id.includes(Number(el.ID)))\r\n                    .reduce((prev, curr) => prev.TITLE + ', ' + curr.TITLE)\r\n                row.TRUEVALUE = Users.filter(el => field.id.includes(Number(el.ID)))\r\n            } else {\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                row.TRUEVALUE = Users.filter(user => user.ID === field.id)[0]\r\n                if(row.TRUEVALUE) row.DISPLAYVALUE = Users.filter(user => user.ID === field.id)[0].TITLE\r\n\r\n            }\r\n            row.ALLOW = true\r\n\r\n        })\r\n    }\r\n    const contactSet = Array.from(new Set(contactIDs)).flat()\r\n    if (contactSet.length) {\r\n        const resUser = (await callMethod('crm.contact.list', { id: contactSet })).data()\r\n        const Users = resUser\r\n        contactfieldNames.forEach(field => {\r\n            const row = data.value.filter(el => el.NAME === field.name)[0]\r\n            if (Array.isArray(field.id) && field.id.length) {\r\n                row.DISPLAYVALUE = Users.filter(el => field.id.includes(Number(el.ID)))\r\n                    .reduce((prev, curr) => prev.NAME + ', ' + curr.NAME)\r\n                row.TRUEVALUE = Users.filter(el => field.id.includes(Number(el.ID)))\r\n\r\n            } else {\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                row.TRUEVALUE = Users.filter(user => user.ID === field.id)[0]\r\n                if(row.TRUEVALUE) row.DISPLAYVALUE = Users.filter(user => user.ID === field.id)[0].NAME\r\n            }\r\n            row.ALLOW = true\r\n\r\n        })\r\n    }\r\n    const iblockelSet = Array.from(new Set(iblockelIDs)).flat()\r\n    const iblockIDsForElSet = Array.from(new Set(iblockIDsForEl)).flat()\r\n    if (iblockelSet.length) {\r\n        const promisesLists = iblockIDsForElSet.map(iblock => ({\r\n            [iblock]: {\r\n                method: `lists.get.iblock.type.id`,\r\n                params: { IBLOCK_ID: iblock }\r\n            }\r\n        }))\r\n        const resultArr = [];\r\n        let batchLists;\r\n        while (promisesLists.length) {\r\n            const subArrs = promisesLists.splice(0, 50)\r\n            batchLists = {}\r\n            for (let i = 0; i < subArrs.length; i++) {\r\n                batchLists[Object.keys(subArrs[i])[0]] = Object.values(subArrs[i])[0];\r\n            }\r\n            const res = await callBatch(batchLists)\r\n            resultArr.push(res)\r\n        }\r\n        const promisesElementsAll = []\r\n        resultArr.forEach((elem) => {\r\n            const iblockelfields = iblockelfieldNames.filter(field => Object.keys(elem).includes(field.IBLOCK_ID.toString())).map(field => ({\r\n                ...field,\r\n                IBLOCK_TYPE_ID: elem[field.IBLOCK_ID].answer.result\r\n            }))\r\n            promisesElementsAll.push(iblockelfields.filter(field => field.id != 0).map(field => {\r\n                if (!Array.isArray(field.id)) {\r\n                    return {\r\n                        [field.id]: {\r\n                            method: `lists.element.get`,\r\n                            params: { IBLOCK_ID: field.IBLOCK_ID, IBLOCK_TYPE_ID: field.IBLOCK_TYPE_ID, ELEMENT_ID: field.id }\r\n                        }\r\n                    }\r\n                } else {\r\n                    return field.id.map(el => ({\r\n                        [el]: {\r\n                            method: `lists.element.get`,\r\n                            params: { IBLOCK_ID: field.IBLOCK_ID, IBLOCK_TYPE_ID: field.IBLOCK_TYPE_ID, ELEMENT_ID: el }\r\n                        }\r\n                    }))\r\n                }\r\n            }))\r\n        })\r\n        const promisesElements = []\r\n        promisesElementsAll.forEach(el => {\r\n            el.forEach(elem => {\r\n                if (Array.isArray(elem)) {\r\n                    elem.forEach(key => {\r\n                        promisesElements.push(key)\r\n                    })\r\n                } else {\r\n                    promisesElements.push(elem)\r\n                }\r\n            })\r\n        })\r\n        const resultElems = []\r\n        while (promisesElements.length) {\r\n            const subArrs = promisesElements.splice(0, 50)\r\n            batchLists = {}\r\n            for (let i = 0; i < subArrs.length; i++) {\r\n                batchLists[Object.keys(subArrs[i])[0]] = Object.values(subArrs[i])[0];\r\n            }\r\n            const res = await callBatch(batchLists)\r\n            resultElems.push(res)\r\n        }\r\n        const elemMap = {}\r\n        resultElems.forEach(elem=>{\r\n            Object.keys(elem).forEach(el=>{\r\n                elemMap[el] = elem[el]\r\n            })\r\n        })\r\n        iblockelfieldNames.forEach(field=>{\r\n            const row = data.value.filter(el => el.NAME === field.name)[0]\r\n            if(Array.isArray(field.id) && field.id.length){\r\n                row.TRUEVALUE = row.DISPLAYVALUE\r\n                 .map(key=>({\r\n                     ID: key,\r\n                     NAME: elemMap[key].answer.result[0].NAME\r\n                 })).map(field=>({ID: `${field.ID}`, NAME: `${field.NAME} [${field.ID}]`}))\r\n                row.DISPLAYVALUE = row.DISPLAYVALUE.map(key=>({\r\n                    ID: key,\r\n                    NAME: elemMap[key].answer.result.length && elemMap[key].answer.result[0].NAME\r\n                })).map(field=>`${field.NAME} [${field.ID}], `).reduce((a,b)=>a.concat(b))\r\n\r\n                \r\n            } else {\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                if(row.DISPLAYVALUE && elemMap[row.DISPLAYVALUE]){\r\n                    const val = elemMap[row.DISPLAYVALUE].answer.result[0].ID\r\n                    const name = elemMap[row.DISPLAYVALUE].answer.result[0].NAME\r\n                    row.TRUEVALUE = elemMap[row.DISPLAYVALUE].answer.result[0]\r\n                    row.DISPLAYVALUE = `${name} [${val}]`\r\n                    row.ALLOW = true\r\n                }\r\n            }\r\n            row.ALLOW = true\r\n        })\r\n    }\r\n    const iblocksecIDSet = Array.from(new Set(iblocksecIDs)).flat()\r\n    const iblockIDsForSecSet = Array.from(new Set(iblockIDsForSec)).flat()\r\n    if (iblocksecIDSet.length) {\r\n        const promisesLists = iblockIDsForSecSet.map(iblock => ({\r\n            [iblock]: {\r\n                method: `lists.get.iblock.type.id`,\r\n                params: { IBLOCK_ID: iblock }\r\n            }\r\n        }))\r\n        const resultArr = [];\r\n        let batchLists;\r\n        while (promisesLists.length) {\r\n            const subArrs = promisesLists.splice(0, 50)\r\n            batchLists = {}\r\n            for (let i = 0; i < subArrs.length; i++) {\r\n                batchLists[Object.keys(subArrs[i])[0]] = Object.values(subArrs[i])[0];\r\n            }\r\n            const res = await callBatch(batchLists)\r\n            resultArr.push(res)\r\n        }\r\n        const promisesElementsAll = []\r\n        resultArr.forEach((elem) => {\r\n            const iblockelfields = iblocksecfieldNames.filter(field => Object.keys(elem).includes(field.IBLOCK_ID.toString())).map(field => ({\r\n                ...field,\r\n                IBLOCK_TYPE_ID: elem[field.IBLOCK_ID].answer.result\r\n            }))\r\n            promisesElementsAll.push(iblockelfields.filter(field => field.id != 0).map(field => {\r\n                if (!Array.isArray(field.id)) {\r\n                    return {\r\n                        [field.id]: {\r\n                            method: `lists.section.get`,\r\n                            params: { IBLOCK_ID: field.IBLOCK_ID, IBLOCK_TYPE_ID: field.IBLOCK_TYPE_ID, FILTER: {\r\n                                id: field.id\r\n                            } }\r\n                        }\r\n                    }\r\n                } else {\r\n                    return field.id.map(el => ({\r\n                        [el]: {\r\n                            method: `lists.section.get`,\r\n                            params: { IBLOCK_ID: field.IBLOCK_ID, IBLOCK_TYPE_ID: field.IBLOCK_TYPE_ID, FILTER: {\r\n                                id: field.id\r\n                            } }\r\n                        }\r\n                    }))\r\n                }\r\n            }))\r\n        })\r\n        const promisesElements = []\r\n        promisesElementsAll.forEach(el => {\r\n            el.forEach(elem => {\r\n                if (Array.isArray(elem)) {\r\n                    elem.forEach(key => {\r\n                        promisesElements.push(key)\r\n                    })\r\n                } else {\r\n                    promisesElements.push(elem)\r\n                }\r\n            })\r\n        })\r\n        const resultElems = []\r\n        while (promisesElements.length) {\r\n            const subArrs = promisesElements.splice(0, 50)\r\n            batchLists = {}\r\n            for (let i = 0; i < subArrs.length; i++) {\r\n                batchLists[Object.keys(subArrs[i])[0]] = Object.values(subArrs[i])[0];\r\n            }\r\n            const res = await callBatch(batchLists)\r\n            resultElems.push(res)\r\n        }\r\n        const elemMap = {}\r\n        resultElems.forEach(elem=>{\r\n            Object.keys(elem).forEach(el=>{\r\n                elemMap[el] = elem[el]\r\n            })\r\n        })\r\n        iblocksecfieldNames.forEach(field=>{\r\n            const row = data.value.filter(el => el.NAME === field.name)[0]\r\n            if(Array.isArray(field.id)){\r\n                row.TRUEVALUE = row.DISPLAYVALUE\r\n                row.DISPLAYVALUE = row.DISPLAYVALUE.map(key=>({\r\n                    ID: key,\r\n                    NAME: elemMap[key].answer.result[0].NAME\r\n                })).map(field=>`${field.NAME} [${field.ID}], `).reduce((a,b)=>a.concat(b)) \r\n\r\n                \r\n            } else {\r\n                if(row.DISPLAYVALUE){\r\n                    const val = elemMap[row.DISPLAYVALUE].answer.result[0].ID\r\n                    const name = elemMap[row.DISPLAYVALUE].answer.result[0].NAME\r\n                    row.DISPLAYVALUE = `${name} [${val}]`\r\n                    row.TRUEVALUE = elemMap[row.DISPLAYVALUE].answer.result[0]\r\n                }\r\n            }\r\n            row.ALLOW = true\r\n\r\n        })\r\n    }\r\n    if(statusesfieldNames.length){\r\n        const resStat = (await callMethod('crm.status.list',{STATUS_ID: statusesIDs})).data()\r\n        const Statuses = resStat.map(stat => ({\r\n            ID: stat.STATUS_ID,\r\n            NAME: stat.NAME\r\n        })).concat({ ID: 'undefined', NAME: 'Не выбран' })\r\n        statusesfieldNames.forEach((field) => {\r\n            const row = data.value.filter(el => el.NAME === field.name)[0]\r\n            console.log(row)\r\n            row.TRUEVALUE = Statuses.filter(stat => stat.ID === field.id)[0]\r\n            if(row.TRUEVALUE) {row.DISPLAYVALUE = Statuses.filter(stat => stat.ID === field.id)[0].NAME}\r\n            row.ALLOW = true\r\n\r\n        })\r\n    }\r\n    const crmIDsSet = Array.from(new Set(crmIDs))\r\n    if(crmIDsSet.length){\r\n        console.log( Array.from(new Set(crmIDsSet.filter(el=>el.entity.includes('DEAL')))))\r\n        let inter\r\n        inter = Array.from(new Set(crmIDsSet.filter(el=>el.entity.includes('DEAL'))))\r\n\r\n        const crmDealIDs = inter.map(el=>{\r\n            if(Array.isArray(el.id)) return el.id.length ? el.id.filter(el=>el.startsWith('D_')).map(el=>String(el).substring(2)) : []\r\n            else return el.id.startsWith('D_') && String(el.id).substring(2)\r\n        }\r\n        ).flat()\r\n        inter = Array.from(new Set(crmIDsSet.filter(el=>el.entity.includes('LEAD'))))\r\n        const crmLeadIDs =inter.map(el=>{\r\n            if(Array.isArray(el.id)) return el.id.length ? el.id.filter(el=>el.startsWith('L_')).map(el=>String(el).substring(2)) : []\r\n            else return el.id.startsWith('L_') && String(el.id).substring(2)\r\n        }\r\n        ).flat()\r\n        inter = Array.from(new Set(crmIDsSet.filter(el=>el.entity.includes('COMPANY'))))\r\n        const crmCompanyIDs = inter.map(el=>\r\n            {\r\n            if(Array.isArray(el.id)) return el.id.length ? el.id.filter(el=>el.startsWith('CO')).map(el=>String(el).substring(3)) : []\r\n            else return el.id.startsWith('CO') && String(el.id).substring(3)\r\n            }\r\n        ).flat()\r\n        inter = Array.from(new Set(crmIDsSet.filter(el=>el.entity.includes('CONTACT'))))\r\n        const crmContactIDs = inter.map(el=>\r\n            {\r\n                if(Array.isArray(el.id)) return el.id.length ? el.id.filter(el=>el.startsWith('C_')).map(el=>String(el).substring(2)) : []\r\n                else return el.id.startsWith('C_') && String(el.id).substring(2)\r\n                }\r\n        ).flat()\r\n        inter = Array.from(new Set(crmIDsSet.filter(el=>el.entity.includes('SMART_INVOICE'))))\r\n        const crmInvoiceIDs = inter.map(el=>\r\n            {\r\n                if(Array.isArray(el.id)) return el.id.length ? el.id.filter(el=>el.startsWith('SI_')).map(el=>String(el).substring(3)) : []\r\n                else return el.id.startsWith('SI_') && String(el.id).substring(3)\r\n                }\r\n        ).flat()\r\n        const resCrm = {}\r\n        if(crmDealIDs.length){\r\n            const res = await (await callMethod('crm.deal.list', { filter: { \"=ID\": crmDealIDs },\r\n            select: [ \"ID\", \"TITLE\" ] })).data()\r\n            resCrm['DEAL'] = res\r\n            crmfieldNames.filter(el=>el.entity.includes('DEAL')).forEach(field=>{\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                if(Array.isArray(row.DISPLAYVALUE)){\r\n                    const dealIDs = row.DISPLAYVALUE.filter(el=>el.startsWith('D_')).map(el=>String(el).substring(2))\r\n                    if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                        row.TRUEVALUE = [...row.TRUEVALUE, ...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`D_${el.ID}`)]\r\n                        \r\n                    }\r\n                } else {\r\n                    if(row.DISPLAYVALUE.startsWith('D_')){\r\n                        const dealIDs = row.DISPLAYVALUE.substring(2)\r\n                        if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                            row.TRUEVALUE = [...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`D_${el.ID}`)]\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n                \r\n                \r\n            })\r\n        }\r\n        if(crmLeadIDs.length){\r\n            console.log(crmLeadIDs)\r\n            const res = await (await callMethod('crm.lead.list', { filter: { \"=ID\": crmLeadIDs },\r\n            select: [ \"ID\", \"NAME\", \"TITLE\" ] })).data()\r\n            resCrm['LEAD'] = res\r\n            crmfieldNames.filter(el=>el.entity.includes('LEAD')).forEach(field=>{\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                if(Array.isArray(row.DISPLAYVALUE)){\r\n                    const dealIDs = row.DISPLAYVALUE.filter(el=>el.startsWith('L_')).map(el=>String(el).substring(2))\r\n                    if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                        console.log(res.filter(el=>dealIDs.includes(el.ID)))\r\n                        row.TRUEVALUE = [...row.TRUEVALUE, ...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`L_${el.ID}`)]\r\n                        \r\n                    }\r\n                } else {\r\n                    if(row.DISPLAYVALUE.startsWith('L_')){\r\n                        const dealIDs = row.DISPLAYVALUE.substring(2)\r\n                        if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                            row.TRUEVALUE = [...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`L_${el.ID}`)]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        if(crmCompanyIDs.length){\r\n            const res = await (await callMethod('crm.company.list', { filter: { \"=ID\": crmCompanyIDs},\r\n            select: [ \"ID\", \"TITLE\" ] })).data()\r\n            resCrm['COMPANY'] = res\r\n            crmfieldNames.filter(el=>el.entity.includes('COMPANY')).forEach(field=>{\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                if(Array.isArray(row.DISPLAYVALUE)){\r\n                    const dealIDs = row.DISPLAYVALUE.filter(el=>el.startsWith('CO_')).map(el=>String(el).substring(3))\r\n                    if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                        row.TRUEVALUE = [...row.TRUEVALUE, ...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`CO_${el.ID}`)]\r\n                        \r\n                    }\r\n                } else {\r\n                    if(row.DISPLAYVALUE.startsWith('CO_')){\r\n                        const dealIDs = row.DISPLAYVALUE.substring(3)\r\n                        if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                            row.TRUEVALUE = [...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`CO_${el.ID}`)]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        if(crmContactIDs.length){\r\n            const res = await (await callMethod('crm.contact.list', { filter: { \"=ID\": crmContactIDs },\r\n            select: [ \"ID\", \"TITLE\", \"NAME\" ] })).data()\r\n            resCrm['CONTACT'] = res\r\n            crmfieldNames.filter(el=>el.entity.includes('CONTACT')).forEach(field=>{\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                if(Array.isArray(row.DISPLAYVALUE)){\r\n                    const dealIDs = row.DISPLAYVALUE.filter(el=>el.startsWith('C_')).map(el=>String(el).substring(2))\r\n                    if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                        row.TRUEVALUE = [...row.TRUEVALUE, ...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`C_${el.ID}`)]\r\n                        \r\n                    }\r\n                } else {\r\n                    if(row.DISPLAYVALUE.startsWith('C_')){\r\n                        const dealIDs = row.DISPLAYVALUE.substring(2)\r\n                        if(res.filter(el=>dealIDs.includes(el.ID)).length){\r\n                            row.TRUEVALUE = [...res.filter(el=>dealIDs.includes(el.ID)).map(el=>`C_${el.ID}`)]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        if(crmInvoiceIDs.length){\r\n            const res = await (await callMethod('crm.item.list', { entityTypeId: 7,filter: { \"=id\": crmInvoiceIDs },\r\n            select: [ \"ID\", \"searchContent\" ] })).data().items\r\n            resCrm['INVOICE'] = res\r\n\r\n            crmfieldNames.filter(el=>el.entity.includes('SMART_INVOICE')).forEach(field=>{\r\n                const row = data.value.filter(el => el.NAME === field.name)[0]\r\n                if(Array.isArray(row.DISPLAYVALUE)){\r\n                    const dealIDs = row.DISPLAYVALUE.filter(el=>el.startsWith('SI_')).map(el=>String(el).substring(3))\r\n                    console.log(res, dealIDs)\r\n                    if(res.filter(el=>dealIDs.includes(String(el.id))).length){\r\n                        row.TRUEVALUE = [...row.TRUEVALUE, ...res.filter(el=>dealIDs.includes(String(el.id))).map(el=>`SI_${el.id}`)]\r\n                        \r\n                    }\r\n                } else {\r\n                    if(row.DISPLAYVALUE.startsWith('SI_')){\r\n                        const dealIDs = row.DISPLAYVALUE.substring(3)\r\n                        console.log(res.filter(el=>dealIDs.includes(el.ID)))\r\n                        if(res.filter(el=>dealIDs.includes(el.id)).length){\r\n                            \r\n                            row.TRUEVALUE = [...res.filter(el=>dealIDs.includes(el.id)).map(el=>`SI_${el.id}`)]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        crmfieldNames.forEach(field=>{\r\n            const row = data.value.filter(el => el.NAME === field.name)[0]\r\n            if(row.TRUEVALUE.length){\r\n                row.DISPLAYVALUE = row.TRUEVALUE.map(el=>{\r\n                    switch(el.substring(0,2)){\r\n                        case 'L_': {\r\n                            const ID = el.substring(2)\r\n                            const NAME = resCrm['LEAD'].filter(elem=>elem.ID==ID)[0].TITLE\r\n                            return `Лид: ${NAME} [${ID}], `\r\n                        }\r\n                        case 'D_': {\r\n                            const ID = el.substring(2)\r\n                            const NAME = resCrm['DEAL'].filter(elem=>elem.ID==ID)[0].TITLE\r\n                            return `Сделка: ${NAME} [${ID}], `\r\n                        }\r\n                        case 'C_': {\r\n                            const ID = el.substring(2)\r\n                            const NAME = resCrm['CONTACT'].filter(elem=>elem.ID==ID)[0].NAME\r\n                            return `Контакт: ${NAME} [${ID}], `\r\n                        }\r\n                        case 'SI': {\r\n                            const ID = el.substring(3)\r\n                            console.log(resCrm['INVOICE'])\r\n                            const NAME = resCrm['INVOICE'].filter(elem=>elem.id==ID)[0].searchContent\r\n                            return `Счет: ${NAME} [${ID}], `\r\n                        }\r\n                        case 'CO': {\r\n                            const ID = el.substring(3)\r\n                            const NAME = resCrm['COMPANY'].filter(elem=>elem.ID==ID)[0].TITLE\r\n                            return `Компания: ${NAME} [${ID}], `\r\n                        }\r\n                    }\r\n                }).join('')\r\n            }\r\n            row.ALLOW = true\r\n\r\n        })\r\n    }\r\n    \r\n}\r\n","const columns = [\r\n    {\r\n        \"dataField\": \"COUNTUSES\",\r\n        \"caption\": \"Подсчитать количество использований\",\r\n        \"name\": \"COUNTUSES\",\r\n        \"allowEditing\": false,\r\n        \"allowHeaderFiltering\": true,\r\n        //\"cellTemplate\": 'COUNTUSES',\r\n        //\"headerCellTemplate\": 'countHeader',\r\n        \"columnAutoWidth\":true,\r\n        \"columnResizingMode\":'COUNTUSES',\r\n        \"width\":'auto'\r\n    },\r\n    {\r\n        \"dataField\": \"NAME\",\r\n        \"caption\": \"Название\",\r\n        \"name\": \"NAME\",\r\n        \"allowEditing\": false,\r\n        \"allowHeaderFiltering\": true,\r\n        \r\n    },\r\n    {\r\n        \"dataField\": \"DESCRIPTION\",\r\n        \"name\": \"DESCRIPTION\",\r\n        \"caption\": \"Описание\",\r\n        \"allowEditing\": false,\r\n    },\r\n    {\r\n        \"dataField\":\"DISPLAYVALUE\",\r\n        \"name\": \"DISPLAYVALUE\",\r\n        \"caption\": \"Значение\",\r\n        \"allowEditing\": true,\r\n        \"cellTemplate\": 'grid-cell'\r\n        //\"cellTemplate\": 'grid-cell'\r\n    },\r\n    {\r\n        \"dataField\": \"PERMISSIONS\",\r\n        \"name\": \"PERMISSIONS\",\r\n        \"caption\": \"Разрешения\",\r\n        \"allowEditing\": false\r\n    },\r\n    {\r\n        \"dataField\": \"TYPE\",\r\n        \"name\": \"TYPE\",\r\n        \"caption\": \"Тип\",\r\n        \"allowEditing\": false\r\n    }\r\n]\r\nexport default columns","<script setup>\r\n\r\nimport { callMethod } from 'bx24-api';\r\nimport DxDropDownBox from 'devextreme-vue/drop-down-box';\r\nimport DxTreeView from 'devextreme-vue/tree-view';\r\nimport { onMounted, ref } from 'vue';\r\nimport _ from 'lodash'\r\nconst props = defineProps(['row', 'valueRef'])\r\nconst row = ref({})\r\nconst selectArray = ref([])\r\nconst value = ref([])\r\nconst drop = ref(null)\r\nconst cachedBox = ref([])\r\nconst emit = defineEmits(['changePending']);\r\nconst lessThanFifty = ref(false)\r\nonMounted(async () => {\r\n    row.value = props.row\r\n\r\n    switch (row.value.TYPE) {\r\n        case 'enumeration': {\r\n            selectArray.value = row.value.ENUM.map(el=>({\r\n                ID:el.ID,\r\n                NAME: el.VALUE\r\n            })).map(el => {\r\n                if (row.value.TRUEVALUE && row.value.TRUEVALUE.length && row.value.TRUEVALUE.filter(val => val.ID == el.ID).length) {\r\n                    return {\r\n                        ...el,\r\n                        CHECK: true\r\n                    }\r\n                } else return {\r\n                    ...el\r\n                }\r\n            })\r\n            if(Array.isArray(row.value.TRUEVALUE)) value.value = _.cloneDeep(row.value.TRUEVALUE)\r\n            else value.value = []\r\n            cachedBox.value = _.cloneDeep(selectArray.value)\r\n            break\r\n        }\r\n        case 'iblock_section':{\r\n            const iblockid = row.value.IBLOCKID\r\n            const type = await (await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })).data()\r\n            const params = { \"IBLOCK_ID\": iblockid, IBLOCK_TYPE_ID: type }\r\n            selectArray.value = await (await callMethod('lists.section.get', params)).data().map(el => ({\r\n                ID: el.ID,\r\n                NAME: `${el.NAME} [${el.ID}]`\r\n            })).map(el => {\r\n                if (row.value.TRUEVALUE && row.value.TRUEVALUE.length && row.value.TRUEVALUE.filter(val => val.ID == el.ID).length) {\r\n                    return {\r\n                        ...el,\r\n                        CHECK: true\r\n                    }\r\n                } else return {\r\n                    ...el\r\n                }\r\n            })\r\n            if(Array.isArray(row.value.TRUEVALUE)) value.value = _.cloneDeep(row.value.TRUEVALUE)\r\n            else value.value = []\r\n            cachedBox.value = _.cloneDeep(selectArray.value)\r\n            break\r\n        }\r\n        case 'crm_company':{\r\n            selectArray.value = await (await callMethod(`crm.company.list`)).data()\r\n                .map(user => ({\r\n                    ID: user.ID,\r\n                    NAME: user.TITLE\r\n                }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE && row.value.TRUEVALUE.length && row.value.TRUEVALUE.filter(val => val.ID == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n                if(Array.isArray(row.value.TRUEVALUE)) value.value = _.cloneDeep(row.value.TRUEVALUE)\r\n            else value.value = []\r\n            break\r\n        }\r\n        case 'crm_contact': {\r\n            selectArray.value = await (await callMethod(`crm.contact.list`)).data()\r\n                .map(user => ({\r\n                    ID: user.ID,\r\n                    NAME: user.NAME\r\n                }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE && row.value.TRUEVALUE.length && row.value.TRUEVALUE.filter(val => val.ID == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n            if(Array.isArray(row.value.TRUEVALUE)) value.value = _.cloneDeep(row.value.TRUEVALUE)\r\n            else value.value = []\r\n            break\r\n        }\r\n        case 'iblock_element': {\r\n            const iblockid = row.value.IBLOCKID\r\n            const type = await (await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })).data()\r\n            const params = { \"IBLOCK_ID\": iblockid, IBLOCK_TYPE_ID: type }\r\n            selectArray.value = await (await callMethod('lists.element.get', params)).data().map(el => ({\r\n                ID: el.ID,\r\n                NAME: `${el.NAME} [${el.ID}]`\r\n            }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE.filter(val => val.ID == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n                if(Array.isArray(row.value.TRUEVALUE)) value.value = _.cloneDeep(row.value.TRUEVALUE)\r\n            else value.value = []\r\n            console.log(selectArray.value)\r\n            cachedBox.value = _.cloneDeep(selectArray.value)\r\n            if (cachedBox.value.length < 50) lessThanFifty.value = true\r\n            break\r\n        }\r\n        case 'user':\r\n        case 'employee': {\r\n            const params = {\r\n                FILTER: {\r\n                    USER_TYPE: row.value.TYPE\r\n                }\r\n            }\r\n            selectArray.value = await (await callMethod('user.get', params)).data()\r\n                .map(user => ({\r\n                    ID: user.ID,\r\n                    NAME: user.NAME !== '' ? `${user.NAME} ${user.LAST_NAME}` : user.EMAIL\r\n                }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE.filter(val => val.ID == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n            console.log(selectArray.value)\r\n            cachedBox.value = _.cloneDeep(selectArray.value)\r\n            if(Array.isArray(row.value.TRUEVALUE)) value.value = _.cloneDeep(row.value.TRUEVALUE)\r\n            else value.value = []\r\n            if (cachedBox.value.length < 50) lessThanFifty.value = true\r\n\r\n        }\r\n    }\r\n})\r\nconst treeChange = (e) => {\r\n    console.log(e)\r\n    const item = e.itemData\r\n    console.log('imchangiiiin', item)\r\n    if (e.itemData.CHECK) {\r\n        console.log(value)\r\n        value.value.push(item)\r\n    } else {\r\n        const elemToDel = value.value.find(el => el.ID == item.ID)\r\n        const indexToDel = value.value.indexOf(elemToDel)\r\n        value.value.splice(indexToDel, 1)\r\n    }\r\n    console.log(value.value)\r\n    let display\r\n    if (value.value.length) {\r\n        display = selectArray.value.filter(el => value.value.filter(elem =>\r\n            elem.ID == el.ID).length)\r\n            .map(elem => `${elem.NAME}, `)\r\n            .reduce((a, b) => a.concat(b))\r\n        console.log(display, 'gay')\r\n    } else display = ''\r\n    let pend = _.cloneDeep(value.value)\r\n    \r\n    emit('changePending', _.cloneDeep(pend), display)\r\n\r\n}\r\nconst handleOpen = () => {\r\n    console.log('hey sexy')\r\n    document.getElementsByClassName('dx-texteditor-input')[1].addEventListener('input', handleInput)\r\n    document.getElementsByClassName('dx-icon-clear')[0]\r\n        .addEventListener('click', () => {\r\n            selectArray.value = _.cloneDeep(cachedBox.value)\r\n        })\r\n}\r\nconst handleInput = async (e) => {\r\n    if (lessThanFifty) return\r\n    switch (row.value.TYPE) {\r\n        case 'crm_company':{\r\n            selectArray.value = await (await callMethod(`crm.company.list`, {FILTER:{'%TITLE': e.target.value}})).data()\r\n                .map(user => ({\r\n                    ID: user.ID,\r\n                    NAME: user.TITLE\r\n                }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE && row.value.TRUEVALUE.length && row.value.TRUEVALUE.filter(val => val.ID == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n            break\r\n        }\r\n        case 'iblock_section': {\r\n            const iblockid = row.value.IBLOCKID\r\n            const type = await (await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })).data()\r\n            const params = { \"IBLOCK_ID\": iblockid, IBLOCK_TYPE_ID: type, FILTER:{\r\n                '%NAME': e.target.value\r\n            } }\r\n            selectArray.value = await (await callMethod('lists.section.get', params)).data().map(el => ({\r\n                ID: el.ID,\r\n                NAME: `${el.NAME} [${el.ID}]`\r\n            })).map(el => {\r\n                if (row.value.TRUEVALUE && row.value.TRUEVALUE.length && row.value.TRUEVALUE.filter(val => val == el.ID).length) {\r\n                    return {\r\n                        ...el,\r\n                        CHECK: true\r\n                    }\r\n                } else return {\r\n                    ...el\r\n                }\r\n            }).forEach(elem => {\r\n                    console.log(selectArray.value.includes(el => el.ID == elem.ID))\r\n                    if (selectArray.value.filter(el => el.ID == elem.ID).length) return\r\n                    else selectArray.value.push(elem)\r\n                })\r\n            if(row.value.TRUEVALUE){\r\n                value.value = _.cloneDeep(row.value.TRUEVALUE.ID)\r\n            }\r\n            cachedBox.value = _.cloneDeep(selectArray.value)\r\n            break\r\n        }\r\n        case 'crm_contact': {\r\n            await (await callMethod('crm.contact.list',{\r\n                FILTER:{\r\n                    '%NAME': e.target.value\r\n                }\r\n            })).data().map(el => ({\r\n                ID: el.ID,\r\n                NAME: `${el.NAME} [${el.ID}]`\r\n            }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE && row.value.TRUEVALUE.length && row.value.TRUEVALUE.filter(val => val == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n                .forEach(elem => {\r\n                    console.log(selectArray.value.includes(el => el.ID == elem.ID))\r\n                    if (selectArray.value.filter(el => el.ID == elem.ID).length) return\r\n                    else selectArray.value.push(elem)\r\n                })\r\n            break\r\n        }\r\n        case 'iblock_element': {\r\n            const iblockid = row.value.IBLOCKID\r\n            const type = await (await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })).data()\r\n            const params = { \"IBLOCK_ID\": iblockid, IBLOCK_TYPE_ID: type, FILTER: { \"SEARCHABLE_CONTENT\": `%${e.target.value}%` } }\r\n            await (await callMethod('lists.element.get', params)).data().map(el => ({\r\n                ID: el.ID,\r\n                NAME: `${el.NAME} [${el.ID}]`\r\n            }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE.filter(val => val == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n                .forEach(elem => {\r\n                    console.log(selectArray.value.includes(el => el.ID == elem.ID))\r\n                    if (selectArray.value.filter(el => el.ID == elem.ID).length) return\r\n                    else selectArray.value.push(elem)\r\n                })\r\n            break\r\n        }\r\n        case 'user':\r\n        case 'employee': {\r\n            await (await callMethod('user.search', { 'FIND': `${e.target.value}` })).data().map(el => ({\r\n                ID: user.ID,\r\n                NAME: user.NAME !== '' ? `${user.NAME} ${user.LAST_NAME}` : user.EMAIL\r\n            }))\r\n                .map(el => {\r\n                    if (row.value.TRUEVALUE.filter(val => val == el.ID).length) {\r\n                        return {\r\n                            ...el,\r\n                            CHECK: true\r\n                        }\r\n                    } else return {\r\n                        ...el\r\n                    }\r\n                })\r\n                .forEach(elem => {\r\n                    console.log(selectArray.value.includes(el => el.ID == elem.ID))\r\n                    if (selectArray.value.filter(el => el.ID == elem.ID).length) return\r\n                    else selectArray.value.push(elem)\r\n                })\r\n            break;\r\n        }\r\n    }\r\n}\r\nconst clear = () =>{\r\n    emit('changePending', '', '')\r\n}\r\n</script>\r\n<template>\r\n    <a-button @click=\"clear\">Очистить значение поля</a-button>\r\n    <br/>\r\n    <DxDropDownBox :value=\"value\" :data-source=\"selectArray\" value-expr=\"ID\" display-expr=\"NAME\" @opened=\"handleOpen\">\r\n        <DxTreeView @opened=\"handleOpen\" selected-expr=\"CHECK\" ref=\"drop\" :value=\"value\" data-structure=\"plain\"\r\n            selection-mode=\"multiple\" show-check-boxes-mode=\"normal\" @item-selection-changed=\"treeChange\" :opened=\"true\"\r\n            :search-enabled=\"true\" key-expr=\"ID\" display-expr=\"NAME\" :data-source=\"selectArray\" />\r\n    </DxDropDownBox>\r\n</template>","import script from \"./Enum.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Enum.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { callMethod } from \"bx24-api\";\r\nimport { onMounted, ref } from \"vue\";\r\nimport DxDropDownBox from \"devextreme-vue/drop-down-box\";\r\nimport DxTreeView from \"devextreme-vue/tree-view\";\r\nimport _ from \"lodash\";\r\nconst props = defineProps([\"row\", \"valueRef\"]);\r\nconst cachedBox = ref([]);\r\nconst row = ref({});\r\nconst selectArray = ref([]);\r\nconst value = ref({});\r\nconst isOpen = ref(false);\r\nconst visibleVal = ref(0);\r\nconst emit = defineEmits([\"changePending\"]);\r\n\r\nconst handleInput = async (e) => {\r\n  console.log(e);\r\n  switch (row.value.TYPE) {\r\n    case \"iblock_section\": {\r\n      const iblockid = row.value.IBLOCKID;\r\n      const type = await (\r\n        await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })\r\n      ).data();\r\n      const params = {\r\n        IBLOCK_ID: iblockid,\r\n        IBLOCK_TYPE_ID: type,\r\n        FILTER: {\r\n          \"%NAME\": e.event.currentTarget.value,\r\n        },\r\n      };\r\n      selectArray.value = await (\r\n        await callMethod(\"lists.section.get\", params)\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: `${el.NAME} [${el.ID}]`,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE && row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE.ID);\r\n      }\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      break;\r\n    }\r\n    case \"crm_contact\": {\r\n      selectArray.value = await (\r\n        await callMethod(\"crm.contact.list\", {\r\n          FILTER: { \"%TITLE\": e.event.currentTarget.value },\r\n        })\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: el.NAME,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE && row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE).ID;\r\n      }\r\n      break;\r\n    }\r\n    case \"crm_company\": {\r\n      selectArray.value = await (\r\n        await callMethod(\"crm.company.list\", {\r\n          FILTER: { \"%TITLE\": e.event.currentTarget.value },\r\n        })\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: el.TITLE,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE && row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE).ID;\r\n      }\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      break;\r\n    }\r\n    case \"iblock_element\": {\r\n      const iblockid = row.value.IBLOCKID;\r\n      const type = await (\r\n        await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })\r\n      ).data();\r\n      const params = {\r\n        IBLOCK_ID: iblockid,\r\n        IBLOCK_TYPE_ID: type,\r\n        FILTER: { SEARCHABLE_CONTENT: `%${e.event.currentTarget.value}%` },\r\n      };\r\n      selectArray.value = await (\r\n        await callMethod(\"lists.element.get\", params)\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: `${el.NAME} [${el.ID}]`,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      break;\r\n    }\r\n    case \"user\":\r\n    case \"employee\": {\r\n      selectArray.value = await (\r\n        await callMethod(\"user.search\", {\r\n          FIND: `${e.event.currentTarget.value}`,\r\n        })\r\n      )\r\n        .data()\r\n        .map((user) => ({\r\n          ID: user.ID,\r\n          NAME:\r\n            user.NAME !== \"\" ? `${user.NAME} ${user.LAST_NAME}` : user.EMAIL,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      break;\r\n    }\r\n  }\r\n};\r\nconst handleChange = () => {\r\n  document\r\n    .getElementsByClassName(\"dx-texteditor-input\")[0]\r\n    .addEventListener(\"input\", handleInput);\r\n};\r\nconst setSelectedValue = (e) => {\r\n  console.log(e);\r\n  console.log(selectArray.value);\r\n  const val = selectArray.value.find((el) => el.ID == e.itemData.ID);\r\n  console.log(val);\r\n  console.log(val.NAME);\r\n  const display = val.NAME;\r\n  emit(\"changePending\", val, display);\r\n  isOpen.value = false;\r\n};\r\nconst updateView = (e, b) => {\r\n  visibleVal.value = e?.component?.getSelectedNodeKeys() || b;\r\n  console.log(visibleVal);\r\n  isOpen.value = false;\r\n};\r\nonMounted(async () => {\r\n  row.value = _.cloneDeep(props.row);\r\n\r\n  switch (row.value.TYPE) {\r\n    case \"char\": {\r\n      selectArray.value = [\r\n        {\r\n          ID: \"Y\",\r\n          NAME: \"Y\",\r\n        },\r\n        {\r\n          ID: \"N\",\r\n          NAME: \"N\",\r\n        },\r\n      ];\r\n      break;\r\n    }\r\n    case \"crm_contact\": {\r\n      selectArray.value = await (\r\n        await callMethod(\"crm.contact.list\")\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: el.NAME,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE && row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE).ID;\r\n      }\r\n      break;\r\n    }\r\n    case \"crm_currency\": {\r\n      selectArray.value = await (\r\n        await callMethod(\"crm.currency.list\")\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.CURRENCY,\r\n          NAME: el.CURRENCY,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE && row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE).ID;\r\n      }\r\n      break;\r\n    }\r\n    case \"crm_company\": {\r\n      selectArray.value = await (\r\n        await callMethod(\"crm.company.list\")\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: el.TITLE,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE && row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE).ID;\r\n      }\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      break;\r\n    }\r\n    case \"iblock_section\": {\r\n      const iblockid = row.value.IBLOCKID;\r\n      const type = await (\r\n        await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })\r\n      ).data();\r\n      const params = { IBLOCK_ID: iblockid, IBLOCK_TYPE_ID: type };\r\n      selectArray.value = await (\r\n        await callMethod(\"lists.section.get\", params)\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: `${el.NAME} [${el.ID}]`,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE && row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE.ID);\r\n      }\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      break;\r\n    }\r\n    case \"crm_status\": {\r\n      let res = await (await callMethod(\"crm.status.list\"))\r\n        .data()\r\n        .map((stat) => ({ ID: stat.STATUS_ID, NAME: stat.NAME }));\r\n        if (row.value.TRUEVALUE) value.value = _.cloneDeep(row.value.TRUEVALUE.ID);\r\n        console.log(row.value.TRUEVALUE);\r\n        let IDs = Array.from(new Set(res.map((el) => el.ID)));\r\n        IDs.forEach((id) => {\r\n          selectArray.value = [...selectArray.value,  res.find((el) => el.ID == id)];\r\n        });\r\n        console.log(res.map((el) => el.ID).length);\r\n        console.log(Array.from(new Set(res.map((el) => el.ID))).length);\r\n        updateView(null, row.value.TRUEVALUE.ID);\r\n      break;\r\n    }\r\n    case \"boolean\": {\r\n      selectArray.value = [\r\n        {\r\n          ID: 0,\r\n          NAME: \"Нет\",\r\n        },\r\n        {\r\n          ID: 1,\r\n          NAME: \"Да\",\r\n        },\r\n      ];\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE.ID);\r\n      }\r\n      break;\r\n    }\r\n    case \"iblock_element\": {\r\n      const iblockid = row.value.IBLOCKID;\r\n      const type = await (\r\n        await callMethod(`lists.get.iblock.type.id`, { IBLOCK_ID: iblockid })\r\n      ).data();\r\n      const params = { IBLOCK_ID: iblockid, IBLOCK_TYPE_ID: type };\r\n      selectArray.value = await (\r\n        await callMethod(\"lists.element.get\", params)\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: `${el.NAME} [${el.ID}]`,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE.ID);\r\n      }\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      break;\r\n    }\r\n    case \"user\":\r\n    case \"employee\": {\r\n      const id = row.value.TRUEVALUE.ID;\r\n      const res1 = await (\r\n        await callMethod(\"user.get\", { ID: id })\r\n      ).data()\r\n      const res2 = await (\r\n        (await callMethod(\"user.get\"))\r\n      ).data()\r\n      const result = [...res1, ...res2]\r\n      const res = Array.from(new Set([...res1.map(el=>el.ID), ...res2.map(el=>el.ID)]))\r\n      const arr = []\r\n      res.forEach(id=>{\r\n        arr.push(result.find((el)=>el.ID==id))\r\n      })\r\n      selectArray.value = arr\r\n        .map((user) => ({\r\n          ID: user.ID,\r\n          NAME:\r\n            user.NAME !== \"\" ? `${user.NAME} ${user.LAST_NAME}` : user.EMAIL,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE.ID == el.ID) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        });\r\n      cachedBox.value = _.cloneDeep(selectArray.value);\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE.ID);\r\n        updateView(null, row.value.TRUEVALUE.ID);\r\n      }\r\n      break;\r\n    }\r\n    case \"enumeration\": {\r\n      selectArray.value = _.cloneDeep(\r\n        row.value.ENUM.map((el) => ({\r\n          ID: el.ID,\r\n          NAME: el.VALUE,\r\n        }))\r\n      );\r\n      console.log(row.value);\r\n      if (row.value.TRUEVALUE) {\r\n        value.value = _.cloneDeep(row.value.TRUEVALUE.ID);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n});\r\nconst clear = () => {\r\n  emit(\"changePending\", \"\", \"\");\r\n  visibleVal.value = null\r\n};\r\n</script>\r\n<template>\r\n  <a-button @click=\"clear\">Очистить значение поля</a-button>\r\n  <br />\r\n  <DxDropDownBox\r\n    :value=\"visibleVal\"\r\n    @opened=\"handleChange\"\r\n    :opened=\"isOpen\"\r\n    value-expr=\"ID\"\r\n    display-expr=\"NAME\"\r\n    :data-source=\"selectArray\"\r\n  >\r\n    <DxTreeView\r\n      :data-source=\"selectArray\"\r\n      :select-by-click=\"true\"\r\n      :search-enabled=\"true\"\r\n      selection-mode=\"single\"\r\n      :opened=\"isOpen\"\r\n      key-expr=\"ID\"\r\n      @item-selection-changed=\"updateView($event)\"\r\n      display-expr=\"NAME\"\r\n      search-expr=\"NAME\"\r\n      :search-editor-options=\"{\r\n        onInput: _.debounce(async ($event) => await handleInput($event), 500),\r\n      }\"\r\n      @item-click=\"setSelectedValue\"\r\n      :value=\"visibleVal\"\r\n    />\r\n  </DxDropDownBox>\r\n</template>\r\n","import script from \"./Select.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Select.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { ref, onMounted  } from 'vue';\r\n\r\nimport DxSelectBox from 'devextreme-vue/select-box';\r\nimport DxTextBox from 'devextreme-vue/text-box'\r\nimport { CloseOutlined } from '@ant-design/icons-vue';\r\n\r\nconst props = defineProps(['row'])\r\nconst boxData = ref([])\r\nconst addActive = ref(true)\r\nconst deletedFields = ref([])\r\nconst memoBoxData = ref([])\r\nconst emit = defineEmits(['changePending']);\r\n\r\nconst type_value = {\r\n    WORK: 'Рабочий',\r\n    MOBILE: 'Мобильный',\r\n    FAX: 'Факс',\r\n    HOME: 'Домашний',\r\n    PAGER: 'Пейджер',\r\n    MAILING: 'Для рассылок',\r\n    OTHER: 'Другой',\r\n    OPENLINE: 'Онлайн-чат',\r\n    IMOL: 'Открытая линия',\r\n}\r\nconst value_type = Object.fromEntries(Object.entries(type_value).map(a => a.reverse()))\r\n\r\nonMounted(() => {\r\n    boxData.value = _.cloneDeep(props.row.TRUEVALUE)||[]\r\n    memoBoxData.value = _.cloneDeep(props.row.TRUEVALUE)||[]\r\n})\r\n\r\nconst sendChanges = () => {\r\n    const pending = []\r\n    memoBoxData.value.forEach(val => {\r\n        if (!boxData.value.filter(el => el.VALUE === val.VALUE && el.VALUE_TYPE === val.VALUE_TYPE && val.ID).length) {\r\n            pending.push({\r\n                ID: val.ID,\r\n                VALUE: ''\r\n            })\r\n        }\r\n\r\n    })\r\n    boxData.value.forEach(val => {\r\n        pending.push({ ...val })\r\n    })\r\n    let display\r\n    if (pending.filter(contact => contact.VALUE).length) {\r\n        display = pending.filter(contact => contact.VALUE)\r\n            .map(contact => ({\r\n                ID: type_value[contact.VALUE_TYPE],\r\n                NAME: contact.VALUE\r\n            }))\r\n            .map(contact => `${contact.ID}: ${contact.NAME}, `)\r\n            .reduce((a, b) => a.concat(b))\r\n    } else display = ''\r\n\r\n    emit('changePending', _.cloneDeep(pending),display)\r\n}\r\nconst changeItemValue = (e, val) => {\r\n    const key = val\r\n    key ? boxData.value.find(elem => elem.ID === key).VALUE = e.event.currentTarget.value : boxData.value[boxData.value.length - 1].VALUE = e.event.currentTarget.value\r\n    if (boxData.value[boxData.value.length - 1]?.VALUE && boxData.value[boxData.value.length - 1]?.VALUE_TYPE) {\r\n        addActive.value = true\r\n    }\r\n    sendChanges()\r\n}\r\nconst changeItemType = (e, val) => {\r\n    const selected = value_type[e.selectedItem]\r\n    const key = val\r\n    key ? boxData.value.find(elem => elem.ID === key).VALUE_TYPE = selected : boxData.value[boxData.value.length - 1].VALUE_TYPE = selected\r\n    if (boxData.value[boxData.value.length - 1].VALUE && boxData.value[boxData.value.length - 1].VALUE_TYPE) {\r\n        addActive.value = true\r\n    }\r\n    sendChanges()\r\n}\r\nconst deleteFieldInMulti = (e, id) => {\r\n    const key = id;\r\n    let item = boxData.value.find(item => item.ID === key);\r\n    const index = boxData.value.indexOf(item)\r\n    boxData.value.splice(index, 1)\r\n    if (boxData.value.length) {\r\n        if (boxData.value[boxData.value.length - 1] || boxData.value[boxData.value.length - 1].VALUE && boxData.value[boxData.value.length - 1].VALUE_TYPE) {\r\n            addActive.value = true\r\n            return\r\n        }\r\n    }\r\n    addActive.value = true\r\n    sendChanges()\r\n    item && item.TYPE_ID && deletedFields.value.push({ ID: item.ID, VALUE_TYPE: item.VALUE_TYPE, VALUE: item.VALUE, TYPE_ID: item.TYPE_ID })\r\n}\r\nconst addFieldInMulti = (e, id) => {\r\n    if (boxData.value.length) {\r\n        if (boxData.value[boxData.value.length - 1] || boxData.value[boxData.value.length - 1].VALUE && boxData.value[boxData.value.length - 1].VALUE_TYPE) {\r\n            boxData.value.push(({ VALUE: '', TYPE_ID: '', VALUE_TYPE: '' }))\r\n            addActive.value = false\r\n            return\r\n        }\r\n\r\n    }\r\n    boxData.value.push(({ VALUE: '', TYPE_ID: '', VALUE_TYPE: '' }))\r\n    addActive.value = false\r\n}\r\nconst clear = () =>{\r\n    emit('changePending', '', '')\r\n}\r\n</script>\r\n<template>\r\n    <div style=\"overflow-y:visible\">\r\n        <div v-for=\"item in boxData\"  style=\"padding:1rem; display:flex; flex-direction:row; align-items:center; \"\r\n            :key=\"item.ID\">\r\n            <DxTextBox v-if=\"item.VALUE||!item.ID\" @input=\"changeItemValue($event, item.ID)\" :value=\"item.VALUE\" style=\"width:10rem\"\r\n                maskInvalidMessage=\"Неправильный формат ввода\" />\r\n            <DxSelectBox v-if=\"item.VALUE||!item.ID\"  @selection-changed=\"changeItemType($event, item.ID)\" :data-source=\"Object.values(type_value)\"\r\n                :value=\"type_value[item.VALUE_TYPE]\" style=\"width:8rem\" />\r\n            <a-button v-if=\"item.VALUE||!item.ID\" style=\"border:0ch;  pointer-events:all; cursor:pointer;\"\r\n                @click=\"deleteFieldInMulti($event, item.ID)\">\r\n                <close-outlined style=\"pointer-events:none\" />\r\n            </a-button>\r\n        </div>\r\n        <a-button @click=\"addFieldInMulti\" :disabled=\"!addActive\">Добавить поле</a-button>\r\n    </div>\r\n</template>","import script from \"./Multifield.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Multifield.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { callMethod } from \"bx24-api\";\r\nimport { ref, onBeforeMount } from \"vue\";\r\nimport DxDropDownBox from \"devextreme-vue/drop-down-box\";\r\nimport DxTreeView from \"devextreme-vue/tree-view\";\r\nimport _ from 'lodash'\r\n\r\nconst selectArray = ref({});\r\nconst value = ref({});\r\nconst entity = ref([]);\r\nconst visibleVal = ref({\r\n    deal: null,\r\n    lead: null,\r\n    contact: null,\r\n    company: null,\r\n    invoice: null,\r\n})\r\nconst props = defineProps([\"row\"]);\r\nconst emit = defineEmits(\"changePending\");\r\nconst isOpened = ref({\r\n    deal: false,\r\n    lead: false,\r\n    contact: false,\r\n    company: false,\r\n    invoice: false,\r\n})\r\nonBeforeMount(async () => {\r\n  value.value = {\r\n    deal: [],\r\n    lead: [],\r\n    contact: [],\r\n    company: [],\r\n    invoice: [],\r\n  };\r\n  const enitities = {\r\n    'SI': 'invoice',\r\n    'CO': 'company',\r\n    'C_': 'contact',\r\n    'D_': 'deal',\r\n    'L_': 'lead',   \r\n  }\r\n  const getID = (e, v) =>{\r\n    switch(e){\r\n        case 'invoice': return v.substring(3)\r\n        case 'company': return v.substring(3)\r\n        case 'contact': return v.substring(2)\r\n        case 'deal': return v.substring(2)\r\n        case 'lead': return v.substring(2)\r\n    }\r\n  }\r\n  entity.value = _.cloneDeep(props.row.CRMENTITY);\r\n  if (!props.row.TRUEVALUE) return;\r\n  const val = props.row.TRUEVALUE[0]\r\n  const entit = enitities[val.substring(0,2)]\r\n  const id = getID(entit, val)\r\n  \r\n  console.log(value.value)\r\n  if(entit==='invoice'){\r\n    selectArray.value[entit] = await (\r\n        await callMethod(`crm.item.list`, {\r\n          entityTypeId: 7,\r\n        })\r\n      )\r\n        .data()\r\n        .items.map((el) => ({\r\n          ID: el.id,\r\n          NAME: getName(entit, el),\r\n        }));\r\n  } else {\r\n    selectArray.value[entit] = await (await callMethod(`crm.${entit}.list`))\r\n      .data()\r\n      .map((el) => ({\r\n        ID: el.ID,\r\n        NAME: getName(entit, el),\r\n      }));\r\n  }\r\n  value.value[entit] = {\r\n    ID: id\r\n  }\r\n  visibleVal.value[entit] = id\r\n  \r\n});\r\nconst handleChange = async (ev) => {\r\n    isOpened.value[ev] = true\r\n    console.log(ev)\r\n  document\r\n    .getElementsByClassName(\"dx-texteditor-input\")[0]\r\n    .addEventListener(\"input\", (e) => handleInput(e, ev));\r\n  if (ev === \"invoice\") {\r\n    selectArray.value[ev] = await (\r\n      await callMethod(`crm.item.list`, {\r\n        entityTypeId: 7,\r\n      })\r\n    )\r\n      .data()\r\n      .items.map((elem) => ({\r\n        ID: elem.id,\r\n        NAME: getName(ev, elem),\r\n      }));\r\n    return;\r\n  }\r\n  selectArray.value[ev] = await (await callMethod(`crm.${ev}.list`))\r\n    .data()\r\n    .map((elem) => ({\r\n      ID: elem.ID,\r\n      NAME: getName(ev, elem),\r\n    }));\r\n};\r\nconst setSelectedValue = (e, ev) => {\r\n    isOpened.value[ev] = false\r\n  console.log(selectArray.value[ev], e);\r\n  const val = e.itemData.ID;\r\n  value.value[ev] = selectArray.value[ev].find((el) => el.ID == val);\r\n  Object.keys(value.value).forEach((key) => {\r\n    if (key == ev) return;\r\n    else value.value[key] = null;\r\n  });\r\n  if (!e.itemData.selected) {\r\n    value.value[ev] = e.itemData;\r\n  } else {\r\n    value.value[ev] = {}\r\n  }\r\n  console.log(value.value);\r\n  const pend = Object.keys(value.value)\r\n    .map((el) => {\r\n      switch (el) {\r\n        case \"deal\": {\r\n          if (value.value[el]?.ID) return `D_${value.value[el].ID}`;\r\n          else return ''\r\n        }\r\n        case \"lead\": {\r\n          if (value.value[el]?.ID) return `L_${value.value[el].ID}`;\r\n          else return ''\r\n        }\r\n        case \"contact\": {\r\n          if (value.value[el]?.ID) return `C_${value.value[el].ID}`;\r\n          else return ''\r\n        }\r\n        case \"company\": {\r\n          if (value.value[el]?.ID) return `CO_${value.value[el].ID}`;\r\n          else return ''\r\n        }\r\n        case \"invoice\": {\r\n          if (value.value[el]?.ID) return `SI_${value.value[el].ID}`;\r\n          else return ''\r\n        }\r\n      }\r\n    })\r\n    .filter((el) => el);\r\n  const display = Object.keys(value.value)\r\n    .map((el) => {\r\n      switch (el) {\r\n        case \"deal\": {\r\n          if (value.value[el]) return `Сделка: ${value.value[el].NAME}`;\r\n        }\r\n        case \"lead\": {\r\n          if (value.value[el]) return `Лид: ${value.value[el].NAME}`;\r\n        }\r\n        case \"contact\": {\r\n          if (value.value[el]) return `Контакт: ${value.value[el].NAME}`;\r\n        }\r\n        case \"company\": {\r\n          if (value.value[el]) return `Компания: ${value.value[el].NAME}`;\r\n        }\r\n        case \"invoice\": {\r\n          if (value.value[el]) return `Счет: ${value.value[el].NAME}`;\r\n        }\r\n      }\r\n    })\r\n    .filter((el) => el)\r\n    .join(\", \");\r\n  emit(\"changePending\", pend, display);\r\n  isOpened.value[ev] = false\r\n};\r\nconst getName = (entity, obj) => {\r\n  switch (entity) {\r\n    case \"lead\": {\r\n\r\n     return `${obj.TITLE} [${obj.ID}]`;\r\n    }\r\n    case \"deal\":\r\n      return `${obj.TITLE} [${obj.ID}]`;\r\n    case \"contact\":\r\n      return `${obj.NAME} [${obj.ID}]`;\r\n    case \"company\":\r\n      return `${obj.TITLE} [${obj.ID}]`;\r\n    case \"invoice\":\r\n      return `${obj.searchContent} [${obj.id}]`;\r\n  }\r\n};\r\nconst handleInput = async (e, ev) => {\r\n  if (ev === \"invoice\"){\r\n    const invoiceparams = {\r\n        entityTypeId: 7,\r\n        filter: {\r\n          \"%searchContent\": e.event.currentTarget.value,\r\n        },\r\n      };\r\n      await (\r\n        await callMethod(`crm.item.list`, invoiceparams)\r\n      )\r\n        .data()\r\n        .items.map((el) => ({\r\n          ID: el.id,\r\n          NAME: `${el.searchContent} [${el.id}]`,\r\n        }))\r\n  }\r\n  else {\r\n    await (\r\n      await callMethod(`crm.${ev}.list`, {\r\n        FILTER: { \"%TITLE\": `${e.event.currentTarget.value}` },\r\n      })\r\n    )\r\n      .data()\r\n      .map((elem) => ({\r\n        ID: elem.ID,\r\n        NAME: getName(ev, elem),\r\n      }))\r\n      .forEach((elem) => {\r\n        if (selectArray.value[ev].filter((el) => el.ID == elem.ID).length)\r\n          return;\r\n        else selectArray.value[ev] = [...selectArray.value[ev], elem];\r\n      });\r\n  }\r\n};\r\nconst updateView = (e, ent) =>{\r\n    Object.keys(visibleVal.value).forEach((key) => {\r\n    if (key == ent) return;\r\n    else visibleVal.value[key] = null;\r\n  });\r\n    visibleVal.value[ent] = e.component.getSelectedNodeKeys()\r\n    console.log(visibleVal.value)\r\n    isOpened.value[ent] = false\r\n}\r\nconst clear = () =>{\r\n    value.value = {}\r\n    visibleVal.value = {}\r\n    emit('changePending', '', '')\r\n}\r\n</script>\r\n<template>\r\n  <div style=\"overflow-y: visible\">\r\n    <a-button @click=\"clear\">Очистить значение поля</a-button>\r\n    <br/>\r\n    <div\r\n      v-if=\"entity.includes('CONTACT')\"\r\n      style=\"\r\n        display: grid;\r\n        grid-template-rows: 2rem;\r\n        grid-template-columns: repeat(2, 5rem, 10rem);\r\n        padding-bottom: 1rem;\r\n      \"\r\n    >\r\n      <h3>Контакты</h3>\r\n      <DxDropDownBox\r\n      :value=\"visibleVal['contact']\"\r\n      :data-source=\"selectArray['contact']\"\r\n      value-expr=\"ID\"\r\n      display-expr=\"NAME\"\r\n      @opened=\"handleChange('contact')\"  \r\n      :opened=\"isOpened['contact']\"\r\n    >\r\n      <DxTreeView\r\n        @opened=\"handleChange('contact')\"\r\n        ref=\"drop\"\r\n        :value=\"value['contact']?.ID\"\r\n        data-structure=\"plain\"\r\n        selection-mode=\"single\"\r\n        @item-click=\"setSelectedValue($event, 'contact')\"\r\n        :search-enabled=\"true\"\r\n        @item-selection-changed=\"updateView($event, 'contact')\"\r\n        :select-by-click=\"true\"\r\n        key-expr=\"ID\"\r\n        display-expr=\"NAME\"\r\n        search-expr=\"NAME\"\r\n        :data-source=\"selectArray['contact']\"\r\n        :search-editor-options=\"{\r\n          onInput:_.debounce( async ($event) =>\r\n            await handleInput($event, 'contact'),500),\r\n        }\"\r\n      />\r\n    </DxDropDownBox>\r\n    </div>\r\n    <div\r\n      v-if=\"entity.includes('COMPANY')\"\r\n      style=\"\r\n        display: grid;\r\n        grid-template-rows: 2rem;\r\n        grid-template-columns: repeat(2, 5rem, 10rem);\r\n        padding-bottom: 1rem;\r\n      \"\r\n    >\r\n      <h3>Компании</h3>\r\n      <DxDropDownBox\r\n      :data-source=\"selectArray['company']\"\r\n      value-expr=\"ID\"\r\n      display-expr=\"NAME\"\r\n      @opened=\"handleChange('company')\"  \r\n      :opened=\"isOpened['company']\"\r\n      :value=\"visibleVal['company']\"\r\n    >\r\n      <DxTreeView\r\n        @opened=\"handleChange('company')\"\r\n        ref=\"drop\"\r\n        :value=\"visibleVal['company']?.ID\"\r\n        data-structure=\"plain\"\r\n        selection-mode=\"single\"\r\n        @item-selection-changed=\"updateView($event, 'company')\"\r\n        @item-click=\"setSelectedValue($event, 'company')\"\r\n        :search-enabled=\"true\"\r\n        :select-by-click=\"true\"\r\n        key-expr=\"ID\"\r\n        display-expr=\"NAME\"\r\n        search-expr=\"NAME\"\r\n        :data-source=\"selectArray['company']\"\r\n        :search-editor-options=\"{\r\n          onInput:_.debounce(async ($event) =>\r\n            await handleInput($event, 'company'),500),\r\n        }\"\r\n      />\r\n    </DxDropDownBox>\r\n    </div>\r\n    <div\r\n      v-if=\"entity.includes('LEAD')\"\r\n      style=\"display: grid;\r\n        grid-template-rows: 2rem;\r\n        grid-template-columns: repeat(2, 5rem, 10rem);\r\n        padding-bottom: 1rem;\r\n      \"\r\n    >\r\n      <h3>Лиды</h3>\r\n      <DxDropDownBox\r\n      :value=\"visibleVal['lead']\"\r\n      :data-source=\"selectArray['lead']\"\r\n      value-expr=\"ID\"\r\n      display-expr=\"NAME\"\r\n      @opened=\"handleChange('lead')\"  \r\n      :opened=\"isOpened['lead']\"\r\n    >\r\n      <DxTreeView\r\n        @opened=\"handleChange('lead')\"\r\n        ref=\"drop\"\r\n        :value=\"value['lead']?.ID\"\r\n        data-structure=\"plain\"\r\n        @item-selection-changed=\"updateView($event, 'lead')\"\r\n        selection-mode=\"single\"\r\n        @item-click=\"setSelectedValue($event, 'lead')\"\r\n        :search-enabled=\"true\"\r\n        :select-by-click=\"true\"\r\n        key-expr=\"ID\"\r\n        display-expr=\"NAME\"\r\n        search-expr=\"NAME\"\r\n        :data-source=\"selectArray['lead']\"\r\n        :search-editor-options=\"{\r\n          onInput:_.debounce( async ($event) =>\r\n            await handleInput($event, 'lead'), 500),\r\n        }\"\r\n      />\r\n    </DxDropDownBox>\r\n    </div>\r\n    <div\r\n      v-if=\"entity.includes('SMART_INVOICE')\"\r\n      style=\"display: grid;\r\n        grid-template-rows: 2rem;\r\n        grid-template-columns: repeat(2, 5rem, 10rem);\r\n        padding-bottom: 1rem;\r\n      \"\r\n    >\r\n      <h3>Счета</h3>\r\n      <DxDropDownBox\r\n      :value=\"visibleVal['invoice']\"\r\n      :data-source=\"selectArray['invoice']\"\r\n      value-expr=\"ID\"\r\n      display-expr=\"NAME\"\r\n      @opened=\"handleChange('invoice')\"  \r\n      :opened=\"isOpened['invoice']\"\r\n    >\r\n      <DxTreeView\r\n        @opened=\"handleChange('invoice')\"\r\n        ref=\"drop\"\r\n        :value=\"value['invoice']?.ID\"\r\n        @item-selection-changed=\"updateView($event, 'invoice')\"\r\n\r\n        data-structure=\"plain\"\r\n        selection-mode=\"single\"\r\n        @item-click=\"setSelectedValue($event, 'invoice')\"\r\n        :search-enabled=\"true\"\r\n        :select-by-click=\"true\"\r\n        key-expr=\"ID\"\r\n        display-expr=\"NAME\"\r\n        search-expr=\"NAME\"\r\n        :data-source=\"selectArray['invoice']\"\r\n        :search-editor-options=\"{\r\n          onInput: _.debounce(async ($event) =>\r\n            await handleInput($event, 'invoice'),500),\r\n        }\"\r\n      />\r\n    </DxDropDownBox>\r\n    </div>\r\n    <div\r\n      v-if=\"entity.includes('DEAL')\"\r\n      style=\" display: grid;\r\n        grid-template-rows: 2rem;\r\n        grid-template-columns: repeat(2, 5rem, 10rem);\r\n        padding-bottom: 1rem;\r\n      \"\r\n    >\r\n      <h3>Сделки</h3>\r\n      <DxDropDownBox\r\n      :data-source=\"selectArray['deal']\"\r\n      value-expr=\"ID\"\r\n      display-expr=\"NAME\"\r\n      @opened=\"handleChange('deal')\"  \r\n      :value=\"visibleVal['deal']\"\r\n      :opened=\"isOpened['deal']\"\r\n    >\r\n      <DxTreeView\r\n        @opened=\"handleChange('deal')\"\r\n        ref=\"drop\"\r\n        :value=\"value['deal']?.ID\"\r\n        data-structure=\"plain\"\r\n        selection-mode=\"single\"\r\n        @item-selection-changed=\"updateView($event, 'deal')\"\r\n        @item-click=\"setSelectedValue($event, 'deal')\"\r\n        :search-enabled=\"true\"\r\n        :select-by-click=\"true\"\r\n        key-expr=\"ID\"\r\n        display-expr=\"NAME\"\r\n        search-expr=\"NAME\"\r\n        :data-source=\"selectArray['deal']\"\r\n        :search-editor-options=\"{\r\n          onInput:_.debounce( async ($event) =>\r\n            await  handleInput($event, 'deal'), 500),\r\n        }\"\r\n      />\r\n    </DxDropDownBox>\r\n    </div>\r\n  </div>\r\n</template>\r\n","import script from \"./Crm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Crm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { callMethod } from \"bx24-api\";\r\nimport DxDropDownBox from \"devextreme-vue/drop-down-box\";\r\nimport DxTreeView from \"devextreme-vue/tree-view\";\r\nimport { onBeforeMount, ref } from \"vue\";\r\nimport _ from \"lodash\";\r\n\r\nconst props = defineProps([\"row\", \"valueRef\"]);\r\nconst emit = defineEmits([\"changePending\"]);\r\n\r\nconst value = ref({});\r\nconst selectArray = ref({});\r\nconst entity = ref([]);\r\nconst row = ref({});\r\nconst truevalue = ref({\r\n  lead: [],\r\n  deal: [],\r\n  contact: [],\r\n  company: [],\r\n  invoice: [],\r\n});\r\nconst getEntityRu = (ent) => {\r\n  console.log(ent);\r\n  switch (ent) {\r\n    case \"LEAD\":\r\n      return \"Лиды\";\r\n    case \"DEAL\":\r\n      return \"Сделки\";\r\n    case \"COMPANY\":\r\n      return \"Компании\";\r\n    case \"CONTACT\":\r\n      return \"Контакты\";\r\n    case \"SMART_INVOICE\":\r\n    case \"INVOICE\":\r\n      return \"Счета\";\r\n  }\r\n};\r\nconst getName = (entity, obj) => {\r\n  switch (entity) {\r\n    case \"lead\": {\r\n      return `${obj.TITLE} [${obj.ID}]`;\r\n    }\r\n    case \"deal\":\r\n      return `${obj.TITLE} [${obj.ID}]`;\r\n    case \"contact\":\r\n      return `${obj.NAME} [${obj.ID}]`;\r\n    case \"company\":\r\n      return `${obj.TITLE} [${obj.ID}]`;\r\n    case \"invoice\":\r\n      return `${obj.searchContent} [${obj.id}]`;\r\n  }\r\n};\r\nonBeforeMount(() => {\r\n  entity.value = _.cloneDeep(props.row.CRMENTITY);\r\n  row.value = _.cloneDeep(props.row);\r\n  props.row.TRUEVALUE.forEach(async(val) => {\r\n    console.log(val);\r\n    switch (val.substring(0, 2)) {\r\n      case \"L_\": {\r\n        const ID = val.substring(2);\r\n        const NAME = await (await callMethod('crm.lead.get',{ID:ID})).data()['TITLE'];\r\n        truevalue.value.lead.push({\r\n            ID:ID,\r\n            NAME: `${NAME} [${ID}]`\r\n        })\r\n        //return `Лид: ${NAME} [${ID}], `;\r\n        break\r\n      }\r\n      case \"D_\": {\r\n        const ID = val.substring(2);\r\n        const NAME = await (await callMethod('crm.deal.get',{ID:ID})).data()['TITLE'];\r\n        truevalue.value.deal.push({\r\n            ID:ID,\r\n            NAME: `${NAME} [${ID}]`\r\n        })\r\n        break\r\n      }\r\n      case \"C_\": {\r\n        const ID = val.substring(2);\r\n        const NAME = await (await callMethod('crm.contact.get',{ID:ID})).data()['TITLE'];\r\n        truevalue.value.contact.push({\r\n            ID:ID,\r\n            NAME: `${NAME} [${ID}]`\r\n        })\r\n        break\r\n      }\r\n      case \"SI\": {\r\n        const ID = val.substring(3);\r\n        const NAME = await (await callMethod('crm.item.get',{id:ID, entityTypeId:7})).data().item\r\n          .searchContent;\r\n          truevalue.value.invoice.push({\r\n            ID:ID,\r\n            NAME: `${NAME} [${ID}]`\r\n        })\r\n        break\r\n      }\r\n      case \"CO\": {\r\n        const ID = val.substring(3);\r\n        const NAME = await (await callMethod('crm.company.get',{ID:ID})).data()['TITLE'];\r\n        truevalue.value.company.push({\r\n            ID:ID,\r\n            NAME: `${NAME} [${ID}]`\r\n        })\r\n        break\r\n      }\r\n    }\r\n    // truevalue.value[val.ENTITY].push({\r\n    //   ...val,\r\n    //   NAME: `${val.NAME} [${val.ID}]`,\r\n    // });\r\n  });\r\n  console.log(truevalue.value);\r\n});\r\nconst handleOpen = async (e, item) => {\r\n  \r\n  let fetch = item;\r\n  if (fetch === \"smart_invoice\") fetch = \"invoice\";\r\n  const res =\r\n    fetch !== \"invoice\"\r\n      ? await (await callMethod(`crm.${fetch}.list`)).data()\r\n      : await (await callMethod(\"crm.item.list\", { entityTypeId: 7 })).data()\r\n          .items;\r\n  selectArray.value[fetch] = res\r\n    .map((el) => ({\r\n      ID: el.ID || el.id,\r\n      NAME: getName(fetch, el),\r\n    }))\r\n    .map((el) => {\r\n      if (truevalue.value[fetch].filter((val) => val.ID == el.ID).length) {\r\n        return {\r\n          ...el,\r\n          CHECK: true,\r\n        };\r\n      } else\r\n        return {\r\n          ...el,\r\n        };\r\n    });\r\n  // document.getElementsByClassName('dx-icon-clear')[0]\r\n  //     .addEventListener('click', () => {\r\n  //         selectArray.value = _.cloneDeep(cachedBox.value)\r\n  //     })\r\n};\r\nconst handleInput = async (e, item) => {\r\n  let fetch = item;\r\n  if (fetch === \"smart_invoice\") fetch = \"invoice\";\r\n  console.log(fetch);\r\n  console.log(e);\r\n  const params = {\r\n    FILTER: {\r\n      \"%TITLE\": e.event.currentTarget.value,\r\n    },\r\n  };\r\n  switch (fetch) {\r\n    case \"deal\":\r\n    case \"company\":\r\n    case \"contact\":\r\n    case \"lead\": {\r\n      await (\r\n        await callMethod(`crm.${fetch}.list`, params)\r\n      )\r\n        .data()\r\n        .map((el) => ({\r\n          ID: el.ID,\r\n          NAME: `${el.TITLE} [${el.ID}]`,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE.filter((val) => val.ID == el.ID).length) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        })\r\n        .forEach((elem) => {\r\n          console.log(elem);\r\n          if (selectArray.value[fetch].filter((el) => el.ID == elem.ID).length)\r\n            return;\r\n          else selectArray.value[fetch] = [...selectArray.value[fetch], elem];\r\n        });\r\n      break;\r\n    }\r\n    case \"invoice\": {\r\n      const invoiceparams = {\r\n        entityTypeId: 7,\r\n        filter: {\r\n          \"%searchContent\": e.event.currentTarget.value,\r\n        },\r\n      };\r\n      await (\r\n        await callMethod(`crm.item.list`, invoiceparams)\r\n      )\r\n        .data()\r\n        .items.map((el) => ({\r\n          ID: el.id,\r\n          NAME: `${el.searchContent} [${el.id}]`,\r\n        }))\r\n        .map((el) => {\r\n          if (row.value.TRUEVALUE.filter((val) => val.ID == el.ID).length) {\r\n            return {\r\n              ...el,\r\n              CHECK: true,\r\n            };\r\n          } else\r\n            return {\r\n              ...el,\r\n            };\r\n        })\r\n        .forEach((elem) => {\r\n          console.log(elem);\r\n          if (selectArray.value[fetch].filter((el) => el.ID == elem.ID).length)\r\n            return;\r\n          else selectArray.value[fetch] = [...selectArray.value[fetch], elem];\r\n        });\r\n      break;\r\n    }\r\n  }\r\n  console.log(selectArray.value[fetch]);\r\n};\r\nconst treeChange = (e, entity) => {\r\n  let ent = entity;\r\n  if (entity === \"smart_invoice\") ent = \"invoice\";\r\n  const item = e.itemData;\r\n  if (item.CHECK) {\r\n    truevalue.value[ent].push(item);\r\n  } else {\r\n    const elemToDel = truevalue.value[ent].find((el) => el.ID == item.ID);\r\n    const indexToDel = truevalue.value[ent].indexOf(elemToDel);\r\n    truevalue.value[ent].splice(indexToDel, 1);\r\n  }\r\n  let display;\r\n  display = Object.keys(truevalue.value)\r\n    .map((key) => {\r\n      console.log(key);\r\n      return truevalue.value[key]\r\n        .map((elem) => `${getEntityRu(key.toUpperCase())}: ${elem.NAME}`)\r\n        .join(\", \");\r\n    })\r\n    .filter((el) => el)\r\n    .join(\", \");\r\n  let pend = Object.keys(truevalue.value)\r\n    .filter((key) => truevalue.value[key])\r\n    .map((key) => {\r\n      return truevalue.value[key].map((elem) => {\r\n        console.log(elem);\r\n        switch (key) {\r\n          case \"lead\":\r\n            return `L_${elem.ID}`;\r\n          case \"deal\":\r\n            return `D_${elem.ID}`;\r\n          case \"contact\":\r\n            return `C_${elem.ID}`;\r\n          case \"company\":\r\n            return `CO_${elem.ID}`;\r\n          case \"invoice\":\r\n            return `SI_${elem.ID}`;\r\n        }\r\n      });\r\n    })\r\n    .filter((el) => el.length)\r\n    .flat();\r\n  console.log(pend);\r\n  emit(\"changePending\", _.cloneDeep(pend), display);\r\n};\r\nconst clear = () =>{\r\n    emit('changePending', '', '')\r\n}\r\n</script>\r\n\r\n<template>\r\n  <a-button @click=\"clear\">Очистить значение поля</a-button>\r\n  <br/>\r\n  <div v-for=\"item in entity\">\r\n    <h3>{{ getEntityRu(item) }}</h3>\r\n    <DxDropDownBox\r\n      :data-source=\"selectArray[item.toLowerCase()]\"\r\n      value-expr=\"ID\"\r\n      display-expr=\"NAME\"\r\n      @opened=\"handleOpen($event, item.toLowerCase())\"\r\n    >\r\n      <DxTreeView\r\n        @opened=\"handleOpen($event, item.toLowerCase())\"\r\n        selected-expr=\"CHECK\"\r\n        :key=\"item\"\r\n        ref=\"drop\"\r\n        :value=\"value\"\r\n        data-structure=\"plain\"\r\n        selection-mode=\"multiple\"\r\n        show-check-boxes-mode=\"normal\"\r\n        @item-selection-changed=\"treeChange($event, item.toLowerCase())\"\r\n        :opened=\"true\"\r\n        :search-enabled=\"true\"\r\n        key-expr=\"ID\"\r\n        display-expr=\"NAME\"\r\n        search-expr=\"NAME\"\r\n        :data-source=\"\r\n          selectArray[item === 'SMART_INVOICE' ? 'invoice' : item.toLowerCase()]\r\n        \"\r\n        :search-editor-options=\"{\r\n          onInput: async ($event) =>\r\n            await handleInput($event, item.toLowerCase()),\r\n        }\"\r\n      />\r\n    </DxDropDownBox>\r\n  </div>\r\n</template>\r\n","import script from \"./CrmMulti.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CrmMulti.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { DxDateBox } from 'devextreme-vue'\r\nimport { onBeforeMount, ref } from 'vue'\r\nconst props = defineProps(['row'])\r\nconst value = ref(new Date())\r\nconst type = ref('')\r\nconst emit = defineEmits(['changePending'])\r\nonBeforeMount(()=>{\r\n    type.value = _.cloneDeep(props.row.EDITOR)\r\n    value.value = _.cloneDeep(props.row.TRUEVALUE)\r\n    console.log(type.value)\r\n})\r\nconst handleChange=(e)=>{\r\n    const val = e.value\r\n    let display\r\n    if(type.value==='datetime'){\r\n        display = new Date(val).toLocaleString('RU')\r\n    } else {\r\n        display = new Date(val).toLocaleDateString('RU')\r\n    }\r\n    emit('changePending', val, display)\r\n}\r\nconst clear = () =>{\r\n    emit('changePending', '', '')\r\n}\r\n</script>\r\n<template>\r\n\r\n    <a-button @click=\"clear\">Очистить значение поля</a-button>\r\n    <br/>\r\n    <DxDateBox @value-changed=\"handleChange\" :type=\"type\" :value=\"value\"/>\r\n</template>","import script from \"./DatePicker.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DatePicker.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { DxTextBox } from 'devextreme-vue';\r\nimport cloneDeep from 'lodash.clonedeep'\r\nimport { CloseOutlined } from '@ant-design/icons-vue';\r\nimport { ref, onBeforeMount } from 'vue';\r\nconst props = defineProps(['row'])\r\nconst emit = defineEmits(['changePending'])\r\nconst textArr = ref([''])\r\nonBeforeMount(()=>{\r\ntextArr.value = cloneDeep(props.row.TRUEVALUE)\r\n})\r\nconst handleChange = (e, index) =>{\r\n    console.log(e)\r\n    textArr.value[index] = e.event.currentTarget?.value\r\n    emit('changePending', textArr.value, textArr.value.join(', '))\r\n}\r\nconst addField = () =>{\r\n    textArr.value.push('')\r\n}\r\nconst delField = (index) =>{\r\n    textArr.value.splice(index,1)\r\n    emit('changePending', textArr.value, textArr.value.join(', '))\r\n}\r\n</script>\r\n\r\n<template>\r\n<div v-for=\"(item, index) in textArr\"   >\r\n\r\n    <div style=\"display:flex; flex-direction:row; align-items: center;\">\r\n        <DxTextBox  :value=\"item\" @input=\"handleChange($event, index)\" />\r\n        <CloseOutlined @click=\"delField(index)\"/>\r\n    </div>\r\n    <br/>\r\n</div>\r\n\r\n<div style=\"display:flex; flex-direction:row;\">\r\n    <a-button style=\"margin-right: 0.5rem;\" type=\"primary\" @click=\"addField\">\r\n    Добавить поле\r\n    </a-button>\r\n</div>\r\n</template>","import script from \"./TextBoxArr.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TextBoxArr.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { DxTextBox } from 'devextreme-vue';\r\nimport { ref } from 'vue';\r\nconst props = defineProps(['row'])\r\nconst emit = defineEmits(['changePending'])\r\nconst textArr = ref('')\r\n\r\nconst handleChange = (e) =>{\r\n    textArr.value = e.event.currentTarget?.value\r\n    emit('changePending', textArr.value, textArr.value)\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n<DxTextBox  @input=\"handleChange($event)\" />\r\n\r\n\r\n</template>","import script from \"./TextBox.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TextBox.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport {\r\n    DxColumnChooser,\r\n    DxDataGrid,\r\n    DxEditing,\r\n    DxExport,\r\n    DxFilterRow,\r\n    DxForm,\r\n    DxGroupPanel,\r\n    DxHeaderFilter,\r\n    DxSearchPanel,\r\n} from 'devextreme-vue/data-grid';\r\nimport { DxItem } from 'devextreme-vue/form';\r\nimport { onMounted, ref } from 'vue';\r\n\r\nimport { getFields } from '../api/getFields'\r\nimport { getAdditional } from '../api/getAdditional'\r\nimport columns from './fields'\r\n\r\nimport EnumVue from './editorTemplates/Enum.vue'\r\nimport SelectVue from './editorTemplates/Select.vue'\r\nimport MultifieldVue from './editorTemplates/Multifield.vue'\r\nimport CrmVue from './editorTemplates/Crm.vue';\r\nimport CrmMulti from './editorTemplates/CrmMulti.vue'\r\n\r\nimport _ from 'lodash';\r\nimport { callBatch, callMethod, placement } from 'bx24-api';\r\n\r\nimport { notification } from 'ant-design-vue';\r\nimport { SaveOutlined } from '@ant-design/icons-vue';\r\nimport DatePicker from './editorTemplates/DatePicker.vue';\r\nimport TextBoxArr from './editorTemplates/TextBoxArr.vue';\r\nimport TextBox from './editorTemplates/TextBox.vue';\r\n\r\n\r\nconst data = ref([])\r\nconst fetch = ref({})\r\nconst cols = ref([])\r\nconst dataGridRefKey = ref(null)\r\nconst countLoad = ref(false)\r\nconst spinning = ref(true)\r\nconst editorTemplate = ref('')\r\nconst btn_mess = ref('Сохранить')\r\nconst pendingValue = ref([])\r\nconst pendingDisplay = ref('')\r\nconst label = ref('')\r\nconst editingRow = ref({})\r\nconst enumMultiple = ref(false)\r\nconst isEditing = ref(false)\r\n\r\nonMounted(async () => {\r\n    const res = await getFields().next()\r\n    data.value = res.value[0]\r\n    fetch.value = res.value[1]\r\n    spinning.value = false\r\n    cols.value = columns\r\n    await getAdditional(data, fetch).next()\r\n\r\n})\r\n\r\nconst onRowPrep = (e) => {\r\n    if (!e.row) return\r\n    dataGridRefKey.value.instance.getVisibleRows().forEach(row=>{\r\n        if(!row.cells[6]) return\r\n        row.cells[6].cellElement.style.visibility = 'hidden'\r\n    })\r\n    switch (e.row.data.EDITOR) {\r\n        case 'textBox': {\r\n            editorTemplate.value = 'textBox'\r\n            break\r\n        }\r\n        case 'textArray':{\r\n            editorTemplate.value = 'textArr'\r\n            break\r\n        }\r\n        case 'crm': {\r\n            editorTemplate.value = 'crm'\r\n            break\r\n        }\r\n        case 'date':\r\n        case 'datetime':{\r\n            editorTemplate.value = 'datetime'\r\n            break;\r\n        }\r\n        case 'checkBoxes': {\r\n            editorTemplate.value = 'enum'\r\n            enumMultiple.value = true\r\n            break;\r\n        }\r\n        case 'selectBox': {\r\n            editorTemplate.value = 'select'\r\n            break;\r\n        }\r\n        case 'multiedit': {\r\n            editorTemplate.value = 'multifield'\r\n            break\r\n        }\r\n        case 'crmMulti':{\r\n            editorTemplate.value = 'crmMulti'\r\n            break;\r\n        }\r\n        default:\r\n            editorTemplate.value = 'notSupported'\r\n    }\r\n    isEditing.value = true\r\n    label.value = e.row.data.NAME\r\n    editingRow.value = e.row.data\r\n}\r\nconst onRowSaving = (e) => {\r\n    e.changes = [{\r\n        data: {\r\n            TRUEVALUE: pendingValue.value,\r\n            DISPLAYVALUE: pendingDisplay.value\r\n        },\r\n        key: editingRow.value.NAME,\r\n        type: 'update'\r\n    }]\r\n    editorTemplate.value = ''\r\n    isEditing.value = false\r\n    dataGridRefKey.value.instance.getVisibleRows().forEach(row=>{\r\n        if(!row.cells[6]) return\r\n        row.cells[6].cellElement.style.visibility = 'visible'\r\n    })\r\n}\r\nconst onRowCancel = () => {\r\n    editorTemplate.value = ''\r\n    pendingValue.value = []\r\n    console.log(pendingValue.value, 'cancel')\r\n    isEditing.value = false\r\n    dataGridRefKey.value.instance.getVisibleRows().forEach(row=>{\r\n        if(!row.cells[6]) return\r\n        row.cells[6].cellElement.style.visibility = 'visible'\r\n    })\r\n\r\n}\r\nconst changePending = (pending, display) => {\r\n    pendingValue.value = _.cloneDeep(pending)\r\n    pendingDisplay.value = display\r\n    console.log(pendingValue.value, pendingDisplay.value, 'pend')\r\n}\r\nconst countField = async () => {\r\n    notification.open({\r\n        message: 'Загрузка может занять некоторое время'\r\n    })\r\n    countLoad.value = true\r\n\r\n    const fieldNames = [];\r\n    let batchLists = {};\r\n    const resultArr = [];\r\n    data.value.forEach(row => {\r\n        const field = row.NAME\r\n        fieldNames.push(field)\r\n    })\r\n    \r\n    const place = await placement.info()\r\n    let ent = place.placement.split('_')[1].toLowerCase()\r\n    let entityTypeId\r\n    let promisesLists\r\n    if(ent==='smart'){\r\n        ent = 'item'\r\n        entityTypeId = 31\r\n        promisesLists = fieldNames.map(field => ({\r\n            [field]: {\r\n                method: `crm.item.list`,\r\n                params: { filter: { [`!${field}`]: \"\" }, entityTypeId }\r\n            }\r\n        }))\r\n    } else if(ent==='dynamic'){\r\n        ent = 'item'\r\n        entityTypeId = place.placement.split('_')[2]\r\n        promisesLists = fieldNames.map(field => ({\r\n            [field]: {\r\n                method: `crm.item.list`,\r\n                params: { filter: { [`!${field}`]: \"\" }, entityTypeId }\r\n            }\r\n        }))\r\n    } else {\r\n        promisesLists = fieldNames.map(field => ({\r\n            [field]: {\r\n                method: `crm.${ent}.list`,\r\n                params: { filter: { [`!${field}`]: \"\" } }\r\n            }\r\n        }))\r\n    }\r\n    try{\r\n\r\n        while (promisesLists.length) {\r\n            const subArrs = promisesLists.splice(0, 50)\r\n            batchLists = {}\r\n            for (let i = 0; i < subArrs.length; i++) {\r\n                batchLists[Object.keys(subArrs[i])[0]] = Object.values(subArrs[i])[0];\r\n            }\r\n            console.log(batchLists)\r\n            const res = await callBatch(batchLists)\r\n            resultArr.push(res)\r\n        }\r\n        const resFlat = resultArr.flat()\r\n        console.log(resFlat)\r\n        resFlat.forEach(field => {\r\n            Object.keys(field).forEach(key => {\r\n                data.value.find(row => row.NAME === key).COUNTUSES = field[key].answer.total\r\n                console.log(field[key].answer.total)\r\n            })\r\n        })\r\n        countLoad.value = false\r\n    } catch(e){\r\n        notification.open({\r\n            message: 'Возникли ошибки при подсчете',\r\n\r\n        })\r\n        countLoad.value = false\r\n\r\n    }\r\n}\r\nconst onDBSave = async () => {\r\n    btn_mess.value = 'Сохраняем...'\r\n    let res = await placement.info()\r\n    let place = res.placement.split('_')[1].toLowerCase();\r\n    let id = res.options.ID;\r\n    let queries = {}\r\n    data.value.forEach(row => {\r\n        if (!row.TRUEVALUE) {\r\n            queries[row.NAME] = row.DISPLAYVALUE\r\n        }\r\n        else {\r\n            if (!Array.isArray(row.TRUEVALUE)) {\r\n                if(row.EDITOR!=='date' && row.EDITOR!=='datetime' && row.TYPE!=='string'  && row.TYPE!=='integer' && row.TYPE!=='double'){\r\n                queries[row.NAME] = row.TRUEVALUE.ID\r\n                } else {\r\n                    queries[row.NAME] = row.TRUEVALUE\r\n                }\r\n                \r\n            }\r\n            else {\r\n                queries[row.NAME] = row.TRUEVALUE.map(el=>el.ID)\r\n                if(row.TYPE==='crm_multifield'||(row.TYPE==='crm'&&row.EDITOR === 'crmMulti')||row.EDITOR==='textArray'){\r\n                    queries[row.NAME] = row.TRUEVALUE\r\n                    console.log(row.TRUEVALUE)\r\n                }\r\n                if(row.TYPE==='crm'&&row.EDITOR === 'crm'){\r\n                    queries[row.NAME] = row.TRUEVALUE[0]\r\n                }\r\n            }\r\n\r\n        }\r\n    })\r\n    await callMethod(\r\n        `crm.${place}.update`,\r\n        {\r\n            id: id,\r\n            fields: queries,\r\n            params: { \"REGISTER_SONET_EVENT\": \"Y\" }\r\n        }).then((result) => {\r\n            if (result.error()) {\r\n                console.error(result.error());\r\n                btn_mess.value = 'Изменения не были сохранены';\r\n                setTimeout(() => {\r\n                    btn_mess.value = 'Сохранить';\r\n                }, 2000);\r\n            } else {\r\n                btn_mess.value = 'Изменения сохранены';\r\n                setTimeout(() => {\r\n                    btn_mess.value = 'Сохранить';\r\n                }, 2000);\r\n            }\r\n        }\r\n        );\r\n}\r\n\r\nconst log = (e) =>{\r\n    if(e.column?.command==='edit' && e.row){\r\n        if(e.row.data.PERMISSIONS.includes('Только для чтения')){\r\n            e.cellElement.style.opacity = 0\r\n            e.cellElement.style.visibility = 'hidden'\r\n            return\r\n        }\r\n        if(e.row.data.ALLOW) {\r\n            e.cellElement.style.opacity = 100\r\n            e.cellElement.style.visibility = 'visible'\r\n            return\r\n        }\r\n        if(e.row.data.EDITOR ==='nan'){\r\n            e.cellElement.style.visibility = 'hidden'\r\n            e.cellElement.style.opacity = 0\r\n            return\r\n        }\r\n        if(!e.row.data.DISPLAYVALUE){\r\n            e.cellElement.style.visibility = 'visible'\r\n            e.cellElement.style.opacity = 100\r\n            return\r\n        }\r\n        \r\n\r\n    }\r\n\r\n}\r\n</script>\r\n<template>\r\n    <div id=\"app-container\">\r\n        <p>После сохранения в форме не забудьте сохранить изменения на сервер, нажав на кнопку</p>\r\n        <a-spin wrapperClassName=\"spinner\"\r\n            :spinning=\"spinning\" style=\"display:flex; justify-content:center; align-content:center;\">\r\n            <br/>\r\n            <a-button v-if=\"!spinning\" :loading=\"countLoad\" @click=\"countField\">\r\n                Посчитать количество использований полей\r\n            </a-button>\r\n            <a-button type='primary' id='btn_save2' @click='onDBSave' style=\"display:block; position:absolute; top:0%\">\r\n                <SaveOutlined style=\"pointer-events:none\" /> {{ btn_mess }}\r\n            </a-button>\r\n            <DxDataGrid\r\n                @cell-prepared=\"log\"\r\n                focused-row-enabled id=\"dataGrid\" :data-source='data' key-expr='NAME' :allow-editing=\"true\"\r\n                :allow-column-reordering=\"true\" ref=\"dataGridRefKey\" :columns=\"cols\"\r\n                @editor-preparing=\"onRowPrep($event)\" @saving=\"onRowSaving\" @edit-canceled=\"onRowCancel($event)\">\r\n                <DxHeaderFilter :visible=\"true\" />\r\n                <DxColumnChooser :enabled=\"true\" />\r\n                <DxExport :enabled=\"true\" />\r\n                <DxGroupPanel :visible='true' />\r\n                <DxSearchPanel :visible='true' />\r\n                <DxFilterRow :visible='true' />\r\n                <template #grid-cell=\"{ data }\">\r\n                    <div onmouseover=\"this.style.wordWrap = 'break-word' ;this.style.overflow = 'wrap';this.style.whiteSpace = 'normal'\"\r\n                        onmouseout=\"this.style.wordWrap = '';this.style.overflow = '';this.style.whiteSpace = '';\">\r\n                        {{ data.value?.NAME || data.value }}\r\n                    </div>\r\n                </template>\r\n                <DxEditing mode=\"form\" :use-icons=\"true\" :height=\"500\" :allow-updating=\"true\">\r\n\r\n                    <DxForm :col-span=\"2\" :editor-options=\"{ height: 300 }\" scrolling-enabled\r\n                        style=\"display:flex; flex-direction:column\">\r\n                        <DxItem :data-field=\"'DISPLAYVALUE'\" :template=\"editorTemplate || null\" />\r\n                        <DxItem template=\"label\" />\r\n                    </DxForm>\r\n                </DxEditing>\r\n                <template #label=\"{}\">\r\n                    <label style=\"display:block\">{{ label }}</label>\r\n                </template>\r\n                <template #textArr=\"{}\">\r\n                    <TextBoxArr @change-pending=\"changePending\" :row=\"editingRow\"/>\r\n                </template>\r\n                <template #textBox=\"{}\">\r\n                    <TextBox @change-pending=\"changePending\" :row=\"editingRow\"/>\r\n                </template>\r\n                <template #crm=\"{}\">\r\n                    <CrmVue @change-pending=\"changePending\" :row=\"editingRow\" />\r\n                </template>\r\n                <template #enum=\"{}\">\r\n                    <EnumVue @change-pending=\"changePending\" :row=\"editingRow\" />\r\n                </template>\r\n                <template #select=\"{}\">\r\n                    <SelectVue @change-pending=\"changePending\" :row=\"editingRow\" />\r\n                </template>\r\n                <template #multifield=\"{}\">\r\n                    <MultifieldVue @change-pending=\"changePending\" :row=\"editingRow\" />\r\n                </template>\r\n                <template #datetime=\"{}\">\r\n                    <DatePicker @change-pending=\"changePending\" :row=\"editingRow\"/>\r\n                </template>\r\n                <template #crmMulti=\"{}\">\r\n                    <CrmMulti @change-pending=\"changePending\" :row=\"editingRow\" />\r\n                </template>\r\n                <template #notSupported=\"{}\">\r\n                    <h2>Тип поля не поддерживается</h2>\r\n                </template>\r\n            </DxDataGrid>\r\n            <a-button v-if=\"!spinning\" type='primary' id='btn_save1' @click='onDBSave' style=\"display:block; position:absolute; bottom:0%\">\r\n                <SaveOutlined style=\"pointer-events:none\" /> {{ btn_mess }}\r\n            </a-button>\r\n        </a-spin>\r\n    </div>\r\n\r\n</template>\r\n<style scoped>\r\n\r\n:root {\r\n  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: 400;\r\n\r\n  color-scheme: light dark;\r\n  color: rgba(255, 255, 255, 0.87);\r\n  background-color: #242424;\r\n\r\n  font-synthesis: none;\r\n  text-rendering: optimizeLegibility;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  -webkit-text-size-adjust: 100%;\r\n}\r\n\r\n\r\n\r\n.card {\r\n  padding: 2em;\r\n}\r\n\r\n#app-container {\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n\r\n\r\n</style>","import script from \"./TableDataGrid.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TableDataGrid.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TableDataGrid.vue?vue&type=style&index=0&id=597e8e5b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-597e8e5b\"]])\n\nexport default __exports__","import script from \"./Tablescreen.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Tablescreen.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { ref, computed, onBeforeMount } from 'vue';\r\nimport Marketplace from './screens/Marketplace.vue';\r\nimport TablescreenVue from './screens/Tablescreen.vue';\r\nimport { placement } from 'bx24-api';\r\nconst fixWindow = () =>{\r\n  try {\r\n    const q = window.name.split(\"|\");\r\n    const domain = q[0].replace(/:(80|443)$/, \"\");\r\n    const protocol = parseInt(q[1]) && true || false;\r\n    const app_sid = q[2];\r\n    parent.postMessage(\"resizeWindow:\" + JSON.stringify({\r\n        \"width\": \"100%\",\r\n        \"height\": Math.max(document.documentElement.scrollHeight, document.documentElement.offsetHeight)\r\n    }) + \"::\" + app_sid, \"http\" + (protocol ? \"s\" : \"\") + \"://\" + domain);\r\n    }\r\n    catch (e) {\r\n      console.error(\"resizeWindow\", e);\r\n    }\r\n}\r\nconst place = ref({options:[], placement:'' });\r\n\r\nconst inFrame = computed(()=>!!window.name);\r\nonBeforeMount(async()=>{\r\n  if(inFrame.value) {\r\n    setInterval(fixWindow, 500);\r\n  }\r\n  place.value = await placement.info()\r\n  if(place.value.placement==='DEFAULT'){\r\n    place.value = 'DEF'\r\n  } else {\r\n    place.value = 'NOTDEF'\r\n  }\r\n})\r\n\r\n</script>\r\n\r\n<template>\r\n  <Marketplace v-if=\"place==='DEF'\"/>\r\n  <TablescreenVue v-if=\"place === 'NOTDEF'\"/>\r\n</template>\r\n\r\n<style scoped>\r\n.logo {\r\n  height: 6em;\r\n  padding: 1.5em;\r\n  will-change: filter;\r\n}\r\n.logo:hover {\r\n  filter: drop-shadow(0 0 2em #646cffaa);\r\n}\r\n.logo.vue:hover {\r\n  filter: drop-shadow(0 0 2em #42b883aa);\r\n}\r\n</style>\r\n","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=cf949210&scoped=true&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-cf949210\"]])\n\nexport default __exports__","import { createStore } from 'vuex';\r\n\r\nexport default createStore({\r\n  state: {\r\n  },\r\n  getters: {\r\n  },\r\n  mutations: {\r\n  },\r\n  actions: {\r\n  },\r\n  modules: {\r\n  },\r\n});\r\n","import { createApp } from 'vue'\r\nimport './style.css'\r\nimport App from './App.vue'\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\n\r\nimport Antd, { notification } from 'ant-design-vue';\r\nimport 'ant-design-vue/dist/antd.css';\r\nimport ruMessages from 'devextreme/localization/messages/ru.json';\r\nimport { locale, loadMessages } from 'devextreme/localization';\r\nloadMessages(ruMessages);\r\nlocale('ru');\r\nimport store from './store';\r\n\r\ncreateApp(App).use(Antd).use(store).mount('#app')\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkapp_bps_tree_vuejs\"] = self[\"webpackChunkapp_bps_tree_vuejs\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(80623); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["messages","leads","deals","companies","contacts","quotes","invoices","smart","__exports__","btnArray","ref","isOn","targetType","onMounted","async","domain","location","origin","pathname","res","callMethod","data","forEach","placement","value","String","startsWith","notifyMessage","on","type","clickHandler","targetbtn","find","btn","event","currentTarget","attributes","tarType","index","indexOf","console","log","types","IDs","map","entityTypeId","PLACEMENT","id","HANDLER","TITLE","DESCRIPTION","notification","open","message","getFields","table","fetchObj","info","place","split","toLowerCase","entityID","options","ID","contactTypes","WORK","MOBILE","FAX","HOME","PAGER","MAILING","OTHER","OPENLINE","IMOL","Row","constructor","NAME","TYPE","DISPLAYVALUE","PERMISSIONS","EDITOR","IBLOCKID","CRMENTITY","TRUEVALUE","ENUM","this","entityFields","fieldsArray","fields","Object","keys","key","permissions","editor","enumItems","iblockid","description","entity","formLabel","title","isDynamic","push","isImmutable","isMultiple","isReadOnly","isRequired","items","item","settings","IBLOCK_ID","filter","el","row","rowName","rowValue","ALLOW","length","VALUE_TYPE","VALUE","includes","Number","join","Date","toLocaleString","toLocaleDateString","getAdditional","fetch","userIDs","userfieldNames","companyIDS","companyFieldNames","iblockelIDs","iblockelfieldNames","iblockIDsForEl","iblocksecIDs","iblocksecfieldNames","iblockIDsForSec","statusesIDs","statusesfieldNames","crmIDs","crmfieldNames","contactIDs","contactfieldNames","name","userSet","Array","from","Set","flat","resUser","Users","getName","user","LAST_NAME","EMAIL","field","isArray","reduce","a","b","concat","companySet","prev","curr","contactSet","iblockelSet","iblockIDsForElSet","promisesLists","iblock","method","params","resultArr","batchLists","subArrs","splice","i","values","callBatch","promisesElementsAll","elem","iblockelfields","toString","IBLOCK_TYPE_ID","answer","result","ELEMENT_ID","promisesElements","resultElems","elemMap","val","iblocksecIDSet","iblockIDsForSecSet","FILTER","resStat","STATUS_ID","Statuses","stat","crmIDsSet","inter","crmDealIDs","substring","crmLeadIDs","crmCompanyIDs","crmContactIDs","crmInvoiceIDs","resCrm","select","dealIDs","searchContent","columns","selectArray","drop","cachedBox","lessThanFifty","props","CHECK","_","USER_TYPE","treeChange","e","itemData","elemToDel","indexToDel","display","pend","emit","handleOpen","document","getElementsByClassName","addEventListener","handleInput","target","clear","isOpen","visibleVal","SEARCHABLE_CONTENT","FIND","handleChange","setSelectedValue","updateView","component","getSelectedNodeKeys","CURRENCY","res1","res2","arr","boxData","addActive","deletedFields","memoBoxData","type_value","value_type","fromEntries","entries","reverse","cloneDeep","sendChanges","pending","contact","changeItemValue","changeItemType","selected","selectedItem","deleteFieldInMulti","TYPE_ID","addFieldInMulti","deal","lead","company","invoice","isOpened","onBeforeMount","enitities","getID","v","entit","ev","obj","invoiceparams","ent","truevalue","getEntityRu","toUpperCase","textArr","addField","delField","cols","dataGridRefKey","countLoad","spinning","editorTemplate","btn_mess","pendingValue","pendingDisplay","label","editingRow","enumMultiple","isEditing","next","onRowPrep","instance","getVisibleRows","cells","cellElement","style","visibility","onRowSaving","changes","onRowCancel","changePending","countField","fieldNames","resFlat","COUNTUSES","total","onDBSave","queries","then","error","setTimeout","column","command","opacity","fixWindow","q","window","replace","protocol","parseInt","app_sid","parent","postMessage","JSON","stringify","Math","max","documentElement","scrollHeight","offsetHeight","inFrame","computed","setInterval","createStore","state","getters","mutations","actions","modules","loadMessages","ruMessages","locale","createApp","App","use","Antd","store","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}